
#Область Переменных

Перем НомерРелизаПлатформы;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Получить структуру параметров пользователя.
// Возвращяет описание параметров пользователя используемых для создания
// и заполняет значения по умолчанию.
// Возвращаемое значение:
//  Структура - Получить структуру параметров пользователя:
// * УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор пользователя ИБ
// * Имя - Строка - Краткое имя пользователя, имя пользователя ИБ 
// * ПолноеИмя - Строка - Полное имя в виде ФИО.; является представлением
// * АутентификацияOpenID - Булево
// * АутентификацияСтандартная - Булево
// * ПоказыватьВСпискеВыбора - Булево
// * СтарыйПароль - Неопределено
// * Пароль - Неопределено
// * СохраняемоеЗначениеПароля - Строка
// * ПарольУстановлен - Булево
// * ЗапрещеноИзменятьПароль - Булево
// * АутентификацияОС - Булево
// * ПользовательОС - Строка
// * ЗапрещеноВосстанавливатьПароль - Булево
// * АдресЭлектроннойПочты - Строка 
// * ОсновнойИнтерфейс - Строка
// * РежимЗапуска - Строка
// * Язык - Строка
// * Роли - Неопределено
Функция ПолучитьСтруктуруПараметровПользователя() Экспорт

	СтруктураПараметровПользователя = Пользователи.НовоеОписаниеПользователяИБ();
	
	СтруктураПараметровПользователя.Вставить("ГруппыДоступа", "");
	СтруктураПараметровПользователя.Вставить("ПользовательОснование", "");
	СтруктураПараметровПользователя.Вставить("Комментарий", "");
	СтруктураПараметровПользователя.Вставить("ПотребоватьСменуПароляПриВходе", Ложь);
	
	ЗаполнитьЗначенияПоУмолчанию(СтруктураПараметровПользователя);
	
	Возврат СтруктураПараметровПользователя;

КонецФункции // ПолучитьСтруктуруПараметровПользователя()

// Получить массив случайных имен пользователей.
// Генерирует случайные ФИО на основе данных макета
// Параметры:
//  КоличествоСлучайныхИмен - Число - Количество случайных имен обоих полов в равной пропорции
//  Постфикс - Строка - Постфикс
// 
// Возвращаемое значение:
//  Массив из Строка - ФИО пользователя
Функция ПолучитьНаборСлучайныхПользователей(ПараметрыЗаполнения) Экспорт
	
	НаборСлучайныхИмен	= Новый Массив;
	
	МакетСлучайныхИмен	= ПолучитьМакет("МакетФИО");
	
	НачальнаяСтрокаСписка	= 2;
	РазмерСписка			= МакетСлучайныхИмен.ВысотаТаблицы - НачальнаяСтрокаСписка;
	КоличествоИменПола	= Цел(РазмерСписка / 2);
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(Число(Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss")));
	
	Для СчетчикЭлементов = 1 По ПараметрыЗаполнения.КоличествоПользователей Цикл
		ОписаниеПользователя = ПолучитьСтруктуруПараметровПользователя();
		
		СлучайноеЗначениеПола	= ГСЧ.СлучайноеЧисло(0, 1);
		НачалоДиапазона		= КоличествоИменПола * СлучайноеЗначениеПола + НачальнаяСтрокаСписка;
		КонецДапазона		= НачалоДиапазона + КоличествоИменПола;
		
		СлучайнаяСтрокаФамилии		= ГСЧ.СлучайноеЧисло(НачалоДиапазона, КонецДапазона);
		СлучайнаяСтрокаИмени		= ГСЧ.СлучайноеЧисло(НачалоДиапазона, КонецДапазона);
		СлучайнаяСтрокаОтчества	= ГСЧ.СлучайноеЧисло(НачалоДиапазона, КонецДапазона);
		
		Фамилия	= МакетСлучайныхИмен.Область(СлучайнаяСтрокаФамилии,	2, СлучайнаяСтрокаФамилии,	2).Текст;
		Имя		= МакетСлучайныхИмен.Область(СлучайнаяСтрокаИмени,	3, СлучайнаяСтрокаИмени,	3).Текст;
		Отчества	= МакетСлучайныхИмен.Область(СлучайнаяСтрокаОтчества,	4, СлучайнаяСтрокаОтчества,	4).Текст;
		
		ПредставлениеФИО = СтрШаблон("%1 %2 %3 %4", Фамилия, Имя, Отчества, ПараметрыЗаполнения.Постфикс);
		
		НаборСлучайныхИмен.Добавить(СокрЛП(ПредставлениеФИО));
		
		ОписаниеПользователя.ПолноеИмя = СокрЛП(ПредставлениеФИО);
		
	КонецЦикла;
	
	НаборСлучайныхПользователей = ЗаполнитьНаборПользователей(НаборСлучайныхИмен, ПараметрыЗаполнения);
	
	Если ПараметрыЗаполнения.ДоступПоСлучайномуПользователю Тогда
		УстановитьСлучайныхПользователейОснованийНаСервере(НаборСлучайныхПользователей);
	КонецЕсли;
	
	Возврат НаборСлучайныхПользователей;

КонецФункции // ПолучитьТаблицуСлучайныхПользователей()

Функция ЗаполнитьНаборПользователей(НаборИменПользователей, ПараметрыЗаполнения) Экспорт
	
	НаборОписанийПользователей = Новый Массив;
	
	СписокСвойств = "ПоказыватьВСпискеВыбора, 
						|ПотребоватьСменуПароляПриВходе, 
						|ЗапрещеноИзменятьПароль, 
						|ЗапрещеноВосстанавливатьПароль, 
						|АутентификацияСтандартная, 
						|АутентификацияОС, 
						|АутентификацияOpenID, 
						|АутентификацияOpenIDConnect, 
						|АутентификацияТокеномДоступа";

	МассивУникальныхИмен = Новый Массив;
	
	СвойстваПароля = Пользователи.СвойстваПароля();
	
	Для Каждого ИмяНовогоПользователя Из НаборИменПользователей Цикл
		
		ОписаниеПользователя = ПолучитьСтруктуруПараметровПользователя();
		ОписаниеПользователя.ПолноеИмя = СокрЛП(ИмяНовогоПользователя);
		
		Если ПустаяСтрока(ИмяНовогоПользователя) Или Не ПараметрыЗаполнения.Автозаполнение Тогда
			НаборОписанийПользователей.Добавить(ОписаниеПользователя);
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяБезСимволов = УдалитьСимволы(ИмяНовогоПользователя);
	
		СтруктураИмени = ЧастиИмени(ПолноеИмяБезСимволов);
		
		ПривестиКУникальнымИмена(СтруктураИмени, МассивУникальныхИмен);
		ОписаниеПользователя.Имя = СтруктураИмени.ИмяПользователяИБ;
		
		ОписаниеПользователя.АдресЭлектроннойПочты	= ЗаполнитьСтрокуПоШаблону(ПараметрыЗаполнения.ШаблонПочты, СтруктураИмени);
		ОписаниеПользователя.ПользовательОС			= ЗаполнитьСтрокуПоШаблону(ПараметрыЗаполнения.ШаблонДомена, СтруктураИмени);
		
//		Если ЗначениеЗаполнено(ПараметрыЗаполнения.ПарольПоУмолчанию) Тогда
//			ОписаниеПользователя.Пароль = ПараметрыЗаполнения.ПарольПоУмолчанию;
//		КонецЕсли;
		
		Если ПараметрыЗаполнения.СпособУстановкиПароля = 0 Тогда
			ОписаниеПользователя.Пароль = ПолучитьНовыйПароль(СвойстваПароля, НомерРелизаПлатформы); 
		Иначе
			ОписаниеПользователя.Пароль = ПараметрыЗаполнения.ПарольПоУмолчанию; 
		КонецЕсли;

		Если ЗначениеЗаполнено(ПараметрыЗаполнения.ДанныеПравДоступа) Тогда
			
			Если ПараметрыЗаполнения.ВариантУстановкиДоступа = 0 Тогда
				ОписаниеПользователя.ПользовательОснование = ПараметрыЗаполнения.ДанныеПравДоступа;
			ИначеЕсли ПараметрыЗаполнения.ВариантУстановкиДоступа = 1 Тогда
				ОписаниеПользователя.ГруппыДоступа = ПараметрыЗаполнения.ДанныеПравДоступа;
			КонецЕсли;
			
		КонецЕсли;

		Если ЗначениеЗаполнено(ПараметрыЗаполнения.Комментарий) Тогда
			ОписаниеПользователя.Комментарий = ПараметрыЗаполнения.Комментарий;
		КонецЕсли;
	
		ЗаполнитьЗначенияСвойств(ОписаниеПользователя, ПараметрыЗаполнения, СписокСвойств);
		
		НаборОписанийПользователей.Добавить(ОписаниеПользователя);
			
	КонецЦикла;
	
	Возврат НаборОписанийПользователей;
	
КонецФункции

// Выполнить загрузку пользователей.
// 
// Параметры:
//  СоставПользователей - Массив из см. ПолучитьСтруктуруПараметровПользователя - Состав описаний пользователей
Процедура ВыполнитьЗагрузкуПользователей(СоставПользователей) Экспорт
	
	СтруктуруПараметровПользователя = ПолучитьСтруктуруПараметровПользователя();
		
	Для Каждого ОписаниеПользователя Из СоставПользователей Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктуруПараметровПользователя, ОписаниеПользователя);
		
		Попытка
			//@skip-check query-in-loop
			СоздатьПользователяПоПараметрам(СтруктуруПараметровПользователя);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Заполнить значения по умолчанию.
// Устанавливает значения по умолчанию для пораметров описания пользователя
// Параметры:
//  СтруктураПараметровПользователя - Структура из см. ПолучитьСтруктуруПараметровПользователя
Процедура ЗаполнитьЗначенияПоУмолчанию(СтруктураПараметровПользователя)
	
	СтруктураПараметровПользователя.ПоказыватьВСпискеВыбора = Истина;

КонецПроцедуры

// Создать пользователя по параметрам.
// Параметры:
//  ПараметрыПользователя - Структура - из см. ПолучитьСтруктуруПараметровПользователя
Процедура СоздатьПользователяПоПараметрам(ПараметрыПользователя)
	
	Для Каждого ЭлементПараматров Из ПараметрыПользователя Цикл
		Если ТипЗнч(ЭлементПараматров.Значение) = Тип("Строка") Тогда
			ПараметрыПользователя[ЭлементПараматров.Ключ] = СокрЛП(ЭлементПараматров.Значение);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ПараметрыПользователя.Имя);
	
	Если ПользовательИБ = Неопределено Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	КонецЕсли;
	
	ПользовательИБ.Имя		= ПараметрыПользователя.Имя;
	ПользовательИБ.ПолноеИмя	= ПараметрыПользователя.ПолноеИмя;
	
	Если ЗначениеЗаполнено(ПараметрыПользователя.ПользовательОС) Тогда
		ПользовательИБ.АутентификацияОС	= Истина;
		ПользовательИБ.ПользовательОС		= ПараметрыПользователя.ПользовательОС;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыПользователя.Пароль) Тогда
		ПользовательИБ.АутентификацияСтандартная	= Истина;
		ПользовательИБ.Пароль						= ПараметрыПользователя.Пароль;
	КонецЕсли;
	
	ПользовательИБ.АдресЭлектроннойПочты = ПараметрыПользователя.АдресЭлектроннойПочты;
	
	ПользовательОснование	= Неопределено;
	ГруппыДоступа				= Неопределено;
	
	Если ЗначениеЗаполнено(ПараметрыПользователя.ПользовательОснование) Тогда
		
		ПользовательОснование = Справочники.Пользователи.НайтиПоКоду(ПараметрыПользователя.ПользовательОснование);
		Если Не ЗначениеЗаполнено(ПользовательОснование) Тогда
			ПользовательОснование = Справочники.Пользователи.НайтиПоНаименованию(ПараметрыПользователя.ПользовательОснование);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПользователя.ГруппыДоступа) Тогда
		
		ГруппыДоступа = ПолучитьГруппыДоступа(ПараметрыПользователя.ГруппыДоступа);
		
	КонецЕсли;
	
	ПользовательИБ.Записать();
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
		ЭлементБлокировки.УстановитьЗначение("Наименование", ПользовательИБ.ПолноеИмя);
		
		Если ЗначениеЗаполнено(ГруппыДоступа) Тогда
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппыДоступа");
			ЭлементБлокировки.ИсточникДанных = ГруппыДоступа;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ГруппаДоступа");
		КонецЕсли;
		
		Блокировка.Заблокировать();
		
		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);

		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Пользователь = Справочники.Пользователи.СоздатьЭлемент();
			ПользовательСоздан = Истина;
		Иначе
			Пользователь = Пользователь.ПолучитьОбъект();
			ПользовательСоздан = Ложь;
		КонецЕсли;
		
		Пользователь.Наименование = ПользовательИБ.ПолноеИмя;
		
		ОписаниеПользователяИБ = Новый Структура;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(ПараметрыПользователя.ПользовательОснование) Тогда
			ОписаниеПользователяИБ.Вставить("КопироватьПраваПользователя");
		Иначе
			ОписаниеПользователяИБ.Вставить("НеКопироватьПраваПользователя");
		КонецЕсли;
		
		Пользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		
		Если ЗначениеЗаполнено(ПараметрыПользователя.АдресЭлектроннойПочты) Тогда
			ЗаполнитьПочтуПользователя(Пользователь, ПараметрыПользователя.АдресЭлектроннойПочты);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыПользователя.Комментарий) Тогда
			Пользователь.Комментарий = ПараметрыПользователя.Комментарий;
		КонецЕсли;
		
		Пользователь.Записать();
		
		Если ЗначениеЗаполнено(ПользовательОснование) Тогда
			КопироватьПраваПользователя(ПользовательОснование, Пользователь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ГруппыДоступа) Тогда
			УстановитьГруппыДоступаПользователя(ГруппыДоступа, Пользователь.Ссылка);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		 
		ОтменитьТранзакцию();
		
		ТекстОшибки = "Ошибка при создании пользователя: " + ПараметрыПользователя.Имя +
					Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ЗагрузкаПользователей", 
								УровеньЖурналаРегистрации.Ошибка, 
								, 
								, 
								ТекстОшибки);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		МодульУправлениеДоступомСлужебный.ЗапуститьОбновлениеДоступа();
	КонецЕсли;
	
КонецПроцедуры

// Заполнить почту пользователя.
// 
// Параметры:
//  ПользовательОбъект - СправочникОбъект.Пользователи
//  Почта - Строка - Почта
Процедура ЗаполнитьПочтуПользователя(ПользовательОбъект, Почта)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	КонтактнаяИнформация = МодульУправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация(Ложь);
	СтрокаКонтактнойИнформации = КонтактнаяИнформация.Добавить();
	
	ТипАдресаПочта = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	
	СтрокаКонтактнойИнформации.Тип				= ТипАдресаПочта;
	СтрокаКонтактнойИнформации.Вид				= Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	СтрокаКонтактнойИнформации.Значение			= МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Почта, ТипАдресаПочта);
	СтрокаКонтактнойИнформации.Представление	= Почта;
	
	МодульУправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(ПользовательОбъект, КонтактнаяИнформация, Истина);

КонецПроцедуры  

// Копировать права пользователя.
// 
// Параметры:
//  ПользовательОснование - Строка - полное имя пользователя, 
//  настройки доступа которого будут скопированы
//  ПользовательОбъект - СправочникОбъект.Пользователи
Процедура КопироватьПраваПользователя(ПользовательОснование, ПользовательОбъект)
		
	ЗначениеКопирования = Неопределено;
	
	Если ТипЗнч(ПользовательОснование) = Тип("Строка") Тогда
		
		ЗначениеКопирования = Справочники.Пользователи.НайтиПоКоду(ПользовательОснование);
		Если Не ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			ЗначениеКопирования = Справочники.Пользователи.НайтиПоНаименованию(ПользовательОснование);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПользовательОснование) = Тип("СправочникСсылка.Пользователи") Тогда 
		
		ЗначениеКопирования = ПользовательОснование;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваФорма = Новый Структура;
	СвойстваФорма.Вставить("ПотребоватьСменуПароляПриВходе", Ложь);
	СвойстваФорма.Вставить("СрокДействияНеОграничен", Ложь);
	СвойстваФорма.Вставить("СрокДействия", Дата("00010101"));
	СвойстваФорма.Вставить("ПросрочкаРаботыВПрограммеДоЗапрещенияВхода", 0);
	
	Если ПользовательОбъект.Ссылка.Пустая() Тогда
		СсылкаНового = Справочники.Пользователи.ПолучитьСсылку();
		ПользовательОбъект.УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
	
	Источник = ЗначениеКопирования;
	Приемник = ПользовательОбъект.Ссылка;
	МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
	МодульУправлениеДоступомСлужебный.ПриКопированииПравНовомуПользователю(Источник, Приемник);
	ПользователиСлужебный.СкопироватьГруппыПользователя(Источник, Приемник);

КонецПроцедуры

// Установить группы доступа пользователя.
// 
// Параметры:
//  ТаблицаГруппДоступа - ТаблицаЗначений - Таблица групп доступа:
// 		* ГруппаДоступа - СправочникСсылка.ГруппыДоступа - Группа доступа
//  Пользователь - СправочникСсылка.Пользователи - Пользователь
Процедура УстановитьГруппыДоступаПользователя(ТаблицаГруппДоступа, Пользователь)
	
	Для Каждого СтрокаТаблицы Из ТаблицаГруппДоступа Цикл
		
		ГруппаДоступаОбъект = СтрокаТаблицы.ГруппаДоступа.ПолучитьОбъект();
		
		Если ГруппаДоступаОбъект.Пользователи.Найти(Пользователь, "Пользователь") = Неопределено Тогда
			ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Пользователь;
		КонецЕсли;
		
		ГруппаДоступаОбъект.Записать();
	КонецЦикла;
			
КонецПроцедуры

// Получить группы доступа.
// 
// Параметры:
//  ПраваДоступа - Строка - Наименования групп доступа разделенные 
//  							символом переноса строки или ";"
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Получить группы доступа:
// * ГруппаДоступа - СправочникСсылка.ГруппыДоступа - Группа доступа
Функция ПолучитьГруппыДоступа(ПраваДоступа)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		ТаблицаГруппДоступа = Новый ТаблицаЗначений;
		ТаблицаГруппДоступа.Колонки.Добавить("ГруппаДоступа"); 
		
		Возврат ТаблицаГруппДоступа;
	КонецЕсли;
	
	МассивИменГрупп = СтрРазделить(ПраваДоступа, ";," + Символы.ПС, Ложь);
	
	Для ИндексМассива = 0 По МассивИменГрупп.ВГраница() Цикл
		МассивИменГрупп[ИндексМассива] = СокрЛП(МассивИменГрупп[ИндексМассива]);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				|	ГруппыДоступа.Ссылка КАК ГруппаДоступа
				|ИЗ
				|	Справочник.ГруппыДоступа КАК ГруппыДоступа
				|ГДЕ
				|	ГруппыДоступа.Наименование В(&Наименование)
				|	И ГруппыДоступа.Пользователь = НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("Наименование", МассивИменГрупп);
	Результат = Запрос.Выполнить();
	
	ТаблицаГруппДоступа = Результат.Выгрузить();
	
	Возврат ТаблицаГруппДоступа;
		
КонецФункции // ПолучитьГруппыДоступа()

Функция УдалитьСимволы(Знач ИсходнаяСтрока)
	
	СписокЗапрещенныхСимволов = "~`!@#$%^&*()_+№;%:?[]{}\|'/,""";
	ИсходнаяСтрока = СтрСоединить(СтрРазделить(ИсходнаяСтрока, СписокЗапрещенныхСимволов)," ");
	Возврат СтрЗаменить(ИсходнаяСтрока, "  ", " ");

КонецФункции // УдалитьСимволы()

Функция ЧастиИмени(ФамилияИмяОтчество) 
	
	Результат = Новый Структура;
	Результат.Вставить("Фамилия");
	Результат.Вставить("Имя");
	Результат.Вставить("Отчество");
	Результат.Вставить("КраткоеФИО");
	Результат.Вставить("ИмяПользователяИБ");
	Результат.Вставить("ИнициалыФамилия");
	Результат.Вставить("ИнициалыИмя");
	Результат.Вставить("ИнициалыОтчество");
	
	ЧастиИмени = СтрРазделить(ФамилияИмяОтчество, " ", Ложь); 
	
	КоличествоДополнений = 0;
	
	Если ЧастиИмени.Количество() >= 1 Тогда
		Результат.Фамилия = ЧастиИмени[0];
	КонецЕсли;
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		ПервыеЧастиИмени = Новый Массив;
		ПервыеЧастиИмени.Добавить(НСтр("ru = 'Абдул'"));
		ПервыеЧастиИмени.Добавить(НСтр("ru = 'Абу'"));
		
		Результат.Имя = ЧастиИмени[1];
		Если ПервыеЧастиИмени.Найти(ТРег(ЧастиИмени[1])) <> Неопределено 
			И ЧастиИмени.Количество() >= 3 Тогда
			КоличествоДополнений = КоличествоДополнений + 1;
			Результат.Имя = Результат.Имя + " " + ЧастиИмени[2];
		КонецЕсли;
	КонецЕсли;
	
	Если ЧастиИмени.Количество() >= 3 + КоличествоДополнений Тогда
		Результат.Отчество = ЧастиИмени[2 + КоличествоДополнений];
	КонецЕсли;
	
	Если ЧастиИмени.Количество() > 3 + КоличествоДополнений Тогда
		ДополнительныеЧастиОтчества = Новый Массив;
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'оглы'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'улы'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'уулу'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'кызы'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'гызы'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'угли'"));
		
		Если ДополнительныеЧастиОтчества.Найти(НРег(ЧастиИмени[3 + КоличествоДополнений])) <> Неопределено Тогда
			Результат.Отчество = Результат.Отчество + " " + ЧастиИмени[3 + КоличествоДополнений];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПривестиКУникальнымИмена(СтруктураИмени, МассивУникальныхИмен, СчетчикДублей = 0)
	
	ДопСимволИмени	= Макс(1, Окр(СчетчикДублей / 2));
	ДопСимволОтчества	= Макс(1, СчетчикДублей - ДопСимволИмени);
	
	ДопСимволИмени	= Мин(ДопСимволИмени,		СтрДлина(СтруктураИмени.Имя));
	ДопСимволОтчества	= Мин(ДопСимволОтчества,	СтрДлина(СтруктураИмени.Отчество));
	
	ИнициалыФамилия	= Лев(СтруктураИмени.Фамилия, 1);
	ИнициалыИмя		= Лев(СтруктураИмени.Имя, ДопСимволИмени);
	ИнициалыОтчество	= Лев(СтруктураИмени.Отчество, ДопСимволОтчества);
	
	КраткоеФИО			= ИнициалыИмя + ИнициалыОтчество + СтруктураИмени.Фамилия;
	ИмяПользователяИБ	= СтруктураИмени.Фамилия + ИнициалыИмя + ИнициалыОтчество;
	
	ДубльЗначения = МассивУникальныхИмен.Найти(КраткоеФИО);
	Если ДубльЗначения = Неопределено Тогда
		МассивУникальныхИмен.Добавить(КраткоеФИО);
		СтруктураИмени.ИмяПользователяИБ	= ИмяПользователяИБ;
		СтруктураИмени.КраткоеФИО			= КраткоеФИО;
		СтруктураИмени.ИнициалыИмя		= ИнициалыИмя;
		СтруктураИмени.ИнициалыФамилия	= ИнициалыФамилия;
		СтруктураИмени.ИнициалыОтчество	= ИнициалыОтчество;
	Иначе
		СчетчикДублей = СчетчикДублей + 1;
		ПривестиКУникальнымИмена(СтруктураИмени, МассивУникальныхИмен, СчетчикДублей);
	КонецЕсли;

КонецПроцедуры // ПолучитьУникальноеИмя()

Функция ЗаполнитьСтрокуПоШаблону(Знач СтрокаШаблона, СтруктураИмени)
	
	СоответствиеПараметров = Новый Соответствие;
	СоответствиеПараметров.Вставить("f", "ИнициалыФамилия");
	СоответствиеПараметров.Вставить("i", "ИнициалыИмя");
	СоответствиеПараметров.Вставить("o", "ИнициалыОтчество");
	СоответствиеПараметров.Вставить("F", "Фамилия");
	СоответствиеПараметров.Вставить("I", "Имя");
	СоответствиеПараметров.Вставить("O", "Отчество");
	
	Для Каждого ЭлементСоответствия Из СоответствиеПараметров Цикл
		
		ЗначениеИмени = СтруктураИмени[ЭлементСоответствия.Значение];
		ЗначениеЛатиницей = НРег(СтроковыеФункции.СтрокаЛатиницей(ЗначениеИмени));
		СтрокаШаблона = СтрЗаменить(СтрокаШаблона, "%" + ЭлементСоответствия.Ключ, ЗначениеЛатиницей);
		
	КонецЦикла;
	
	Возврат СтрокаШаблона;
		
КонецФункции

Процедура УстановитьСлучайныхПользователейОснованийНаСервере(НаборНовыхПользователей)

	МассивПользователей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Наименование КАК Пользователь,
	               |	Пользователи.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	НЕ Пользователи.ПометкаУдаления
	               |	И НЕ Пользователи.Недействителен
	               |	И Пользователи.Наименование <> """"
	               |	И НЕ Пользователи.Предопределенный
	               |	И Пользователи.Наименование <> ""<Не указан>""
	               |	И НЕ Пользователи.Служебный";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Результат.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю("Пользователи не найдены");
		ВызватьИсключение "Пользователи не найдены";
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Пользователи.ЭтоПолноправныйПользователь(Выборка.Ссылка, Истина)
			И Пользователи.ВходВПрограммуРазрешен(Выборка.Ссылка) Тогда
			МассивПользователей.Добавить(Выборка.Пользователь);
		КонецЕсли;
	
	КонецЦикла;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	//Количество = ТабличныйДокумент.ВысотаТаблицы;
	
	Для Каждого ЭлементНабора Из НаборНовыхПользователей Цикл
		СлучайноеЧисло = ГСЧ.СлучайноеЧисло(0, МассивПользователей.ВГраница());
		СлучайныйПользователь = МассивПользователей[СлучайноеЧисло];
		
		ЭлементНабора.ПользовательОснование = СлучайныйПользователь;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНовыйПароль(СвойстваПароля, НомерРелизаПлатформы)
	
	ДлинаПароля		= 7;
	СложныйПароль	= Ложь;
	
	Для Каждого ПарольнаяПолитика Из ПолитикиПаролейПользователей.ПолучитьПолитики() Цикл
		ДлинаПароля		= Макс(ПарольнаяПолитика.МинимальнаяДлинаПаролей, ДлинаПароля);
		СложныйПароль	= Макс(ПарольнаяПолитика.ПроверкаСложностиПаролей, СложныйПароль);
	КонецЦикла;
	
	СвойстваПароля.НаименьшаяДлина	= ДлинаПароля;
	СвойстваПароля.Сложный		= СложныйПароль;
	
	Если НомерРелизаПлатформы < 22 Тогда
		НовыйПароль = Пользователи.СоздатьПароль(СвойстваПароля);
		НовыйПароль = СтрЗаменить(НовыйПароль, " ", "_");
	Иначе
		ГенераторСлучайныхПаролей = Новый ГенераторСлучайныхПаролей; 
		НовыйПароль = ГенераторСлучайныхПаролей.СлучайныйПароль(ДлинаПароля);
	КонецЕсли;
	
	Возврат НовыйПароль;
	
КонецФункции // ПолучитьНовыйПароль()

Функция ПолучитьДанныеПользователейТекущейБазы() Экспорт
	
	СоставДанныхПользователей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
						|	Пользователи.ИдентификаторПользователяИБ,
						|	Пользователи.Комментарий,
						|	Пользователи.Наименование,
						|	ПРЕДСТАВЛЕНИЕ(ГруппыДоступаПользователи.Ссылка) КАК ГруппыДоступа,
						|	Пользователи.Ссылка КАК Ссылка
						|ИЗ
						|	Справочник.Пользователи КАК Пользователи
						|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
						|		ПО ГруппыДоступаПользователи.Пользователь = Пользователи.Ссылка
						|ИТОГИ
						|ПО
						|	Ссылка";
	
	Результат = Запрос.Выполнить();
	ВыборкаПользователь = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПользователь.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаПользователь.ИдентификаторПользователяИБ) Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаПользователь.Выбрать();

		МассивГруппДоступа = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивГруппДоступа.Добавить(Выборка.ГруппыДоступа);
		КонецЦикла;
			
		ГруппыДоступа = СтрСоединить	(МассивГруппДоступа, Символы.ПС);
		
		ДанныеПользователя = Пользователи.СвойстваПользователяИБ(ВыборкаПользователь.ИдентификаторПользователяИБ);
		ДанныеПользователя.Вставить("ГруппыДоступа",	ГруппыДоступа);
		ДанныеПользователя.Вставить("Комментарий",		ВыборкаПользователь.Комментарий);
		ДанныеПользователя.Вставить("ПользовательОснование", "");
		ДанныеПользователя.Вставить("ПотребоватьСменуПароляПриВходе", Ложь); 
		
		СоставДанныхПользователей.Добавить(ДанныеПользователя);
		
	КонецЦикла;
	
	Возврат СоставДанныхПользователей;
	
КонецФункции

#КонецОбласти

#Область Инициализация

	СистемнаяИнформация = Новый СистемнаяИнформация;
	СоставВерсии = СтрРазделить(СистемнаяИнформация.ВерсияПриложения, ".");
	НомерРелизаПлатформы = Число(СоставВерсии[2]);
	
#КонецОбласти	
	

