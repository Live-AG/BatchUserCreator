
#Область ПрограммныйИнтерфейс

Функция ПолучитьСтруктуруПараметровПользователя() Экспорт

	СтруктураПараметровПользователя = Пользователи.НовоеОписаниеПользователяИБ();
	
	СтруктураПараметровПользователя.Вставить("ГруппыДоступа");
	СтруктураПараметровПользователя.Вставить("ПользовательОснование");
	СтруктураПараметровПользователя.Вставить("Комментарий");
	
	ЗаполнитьЗначенияПоУмолчанию(СтруктураПараметровПользователя);
	
	Возврат СтруктураПараметровПользователя;

КонецФункции // ПолучитьСтруктуруПараметровПользователя()

Функция ПолучитьФИОСлучайныхПользователей(КоличествоСлучайныхИмен, Постфикс = "") Экспорт
	
	НаборСлучайныхФИО	= Новый Массив;
	
	МакетСлучайныхИмен	= ПолучитьМакет("МакетФИО");
	
	НачальнаяСтрокаСписка	= 2;
	РазмерСписка			= МакетСлучайныхИмен.ВысотаТаблицы - НачальнаяСтрокаСписка;
	КоличествоИменПола	= Цел(РазмерСписка/2);
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(Число(Формат(ТекущаяДата(), "ДФ=ddMMyyyyhhmmss")));
	
	Для СчетчикЭлементов = 1 По КоличествоСлучайныхИмен Цикл
		СлучайноеЗначениеПола	= ГСЧ.СлучайноеЧисло(0, 1);
		НачалоДиапазона		= КоличествоИменПола * СлучайноеЗначениеПола + НачальнаяСтрокаСписка;
		КонецДапазона		= НачалоДиапазона + КоличествоИменПола;
		
		СлучайнаяСтрокаФамилии	= ГСЧ.СлучайноеЧисло(НачалоДиапазона, КонецДапазона);
		СлучайнаяСтрокаИмени		= ГСЧ.СлучайноеЧисло(НачалоДиапазона, КонецДапазона);
		СлучайнаяСтрокаОтчества	= ГСЧ.СлучайноеЧисло(НачалоДиапазона, КонецДапазона);
		
		Фамилия	= МакетСлучайныхИмен.Область(СлучайнаяСтрокаФамилии,	2, СлучайнаяСтрокаФамилии,	2).Текст;
		Имя		= МакетСлучайныхИмен.Область(СлучайнаяСтрокаИмени,	3, СлучайнаяСтрокаИмени,	3).Текст;
		Отчества	= МакетСлучайныхИмен.Область(СлучайнаяСтрокаОтчества,	4, СлучайнаяСтрокаОтчества,	4).Текст;
		
		ПредставлениеФИО = СтрШаблон("%1 %2 %3 %4", Фамилия, Имя, Отчества, Постфикс);
		
		НаборСлучайныхФИО.Добавить(ПредставлениеФИО);
	КонецЦикла;
	
	Возврат НаборСлучайныхФИО;

КонецФункции // ПолучитьТаблицуСлучайныхПользователей()

Процедура ВыполнитьЗагрузкуПользователей(СоставПользователей) Экспорт
	
	СтруктуруПараметровПользователя = ПолучитьСтруктуруПараметровПользователя();
		
	Для Каждого ОписаниеПользователя Из СоставПользователей Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктуруПараметровПользователя, ОписаниеПользователя);
		
		Попытка
			//@skip-check query-in-loop
			СоздатьПользователяПоПараметрам(СтруктуруПараметровПользователя);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьЗначенияПоУмолчанию(СтруктураПараметровПользователя)
	
	СтруктураПараметровПользователя.ПоказыватьВСпискеВыбора = Истина;

КонецПроцедуры

Процедура ЗаполнитьДанныеПоПолномуИмени(ПолноеИмя, ШаблонПараметров = Неопределено)
	
	Если ШаблонПараметров = Неопределено Тогда

		ШаблонПараметров = Новый Структура;
		ШаблонПараметров.Вставить("Домен", "\\localhost\$1");
		ШаблонПараметров.Вставить("Почта", "$1@mail.me");
		
	КонецЕсли;
	
	Имя			= ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(ПолноеИмя);
	ИмяЛатиницей	= СтроковыеФункции.СтрокаЛатиницей(Имя);
	
	ПользовательОС	= СтрШаблон(ШаблонПараметров.Домен, ИмяЛатиницей);
	Почта			= СтрШаблон(ШаблонПараметров.Почта, ИмяЛатиницей);
	
КонецПроцедуры

Процедура СоздатьПользователяПоПараметрам(ПараметрыПользователя)
	
	Для Каждого ЭлементПараматров Из ПараметрыПользователя Цикл
		Если ТипЗнч(ЭлементПараматров.Значение) = Тип("Строка") Тогда
			ПараметрыПользователя[ЭлементПараматров.Ключ] = СокрЛП(ЭлементПараматров.Значение);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ПараметрыПользователя.Имя);
	
	Если ПользовательИБ = Неопределено Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	КонецЕсли;
	
	ПользовательИБ.Имя		= ПараметрыПользователя.Имя;
	ПользовательИБ.ПолноеИмя	= ПараметрыПользователя.ПолноеИмя;
	
	Если ЗначениеЗаполнено(ПараметрыПользователя.ПользовательОС) Тогда
		ПользовательИБ.АутентификацияОС	= Истина;
		ПользовательИБ.ПользовательОС		= ПараметрыПользователя.ПользовательОС;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыПользователя.Пароль) Тогда
		ПользовательИБ.АутентификацияСтандартная	= Истина;
		ПользовательИБ.Пароль						= ПараметрыПользователя.Пароль;
	КонецЕсли;
	
	ПользовательИБ.АдресЭлектроннойПочты = ПараметрыПользователя.АдресЭлектроннойПочты;
	
	ПользовательОснование	= Неопределено;
	ГруппыДоступа			= Неопределено;
	
	Если ЗначениеЗаполнено(ПараметрыПользователя.ПользовательОснование) Тогда
		
		ПользовательОснование = Справочники.Пользователи.НайтиПоКоду(ПараметрыПользователя.ПользовательОснование);
		Если Не ЗначениеЗаполнено(ПользовательОснование) Тогда
			ПользовательОснование = Справочники.Пользователи.НайтиПоНаименованию(ПараметрыПользователя.ПользовательОснование);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПользователя.ГруппыДоступа) Тогда
		
		ГруппыДоступа = ПолучитьГруппыДоступа(ПараметрыПользователя.ГруппыДоступа);
		
	КонецЕсли;
	
	ПользовательИБ.Записать();
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
		ЭлементБлокировки.УстановитьЗначение("Наименование", ПользовательИБ.ПолноеИмя);
		
		Если ЗначениеЗаполнено(ГруппыДоступа) Тогда
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппыДоступа");
			ЭлементБлокировки.ИсточникДанных = ГруппыДоступа;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ГруппаДоступа");
		КонецЕсли;
		
		Блокировка.Заблокировать();
		
		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);

		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Пользователь = Справочники.Пользователи.СоздатьЭлемент();
			ПользовательСоздан = Истина;
		Иначе
			Пользователь = Пользователь.ПолучитьОбъект();
			ПользовательСоздан = Ложь;
		КонецЕсли;
		
		Пользователь.Наименование = ПользовательИБ.ПолноеИмя;
		
		ОписаниеПользователяИБ = Новый Структура;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(ПараметрыПользователя.ПользовательОснование) Тогда
			ОписаниеПользователяИБ.Вставить("КопироватьПраваПользователя");
		Иначе
			ОписаниеПользователяИБ.Вставить("НеКопироватьПраваПользователя");
		КонецЕсли;
		
		Пользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		
		Если ЗначениеЗаполнено(ПараметрыПользователя.АдресЭлектроннойПочты) Тогда
			ЗаполнитьПочтуПользователя(Пользователь, ПараметрыПользователя.АдресЭлектроннойПочты);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыПользователя.Комментарий) Тогда
			Пользователь.Комментарий = ПараметрыПользователя.Комментарий;
		КонецЕсли;
		
		Пользователь.Записать();
		
		Если ЗначениеЗаполнено(ПользовательОснование) Тогда
			КопироватьПраваПользователя(ПользовательОснование, Пользователь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ГруппыДоступа) Тогда
			УстановитьГруппыДоступаПользователя(ГруппыДоступа, Пользователь.Ссылка);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		 
		ОтменитьТранзакцию();
		
		ТекстОшибки = "Ошибка при создании пользователя: " + ПараметрыПользователя.Имя +
					Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ЗагрузкаПользователей", 
								УровеньЖурналаРегистрации.Ошибка, 
								, 
								, 
								ТекстОшибки);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		МодульУправлениеДоступомСлужебный.ЗапуститьОбновлениеДоступа();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПочтуПользователя(ПользовательОбъект, Почта)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	КонтактнаяИнформация = МодульУправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация(Ложь);
	СтрокаКонтактнойИнформации = КонтактнаяИнформация.Добавить();
	
	ТипАдресаПочта = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	
	СтрокаКонтактнойИнформации.Тип				= ТипАдресаПочта;
	СтрокаКонтактнойИнформации.Вид				= Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	СтрокаКонтактнойИнформации.Значение			= МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Почта, ТипАдресаПочта);
	СтрокаКонтактнойИнформации.Представление	= Почта;
	
	МодульУправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(ПользовательОбъект, КонтактнаяИнформация, Истина);

КонецПроцедуры  

Процедура КопироватьПраваПользователя(ПользовательОснование, ПользовательОбъект)
		
	ЗначениеКопирования = Неопределено;
	
	Если ТипЗнч(ПользовательОснование) = Тип("Строка") Тогда
		
		ЗначениеКопирования = Справочники.Пользователи.НайтиПоКоду(ПользовательОснование);
		Если Не ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			ЗначениеКопирования = Справочники.Пользователи.НайтиПоНаименованию(ПользовательОснование);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПользовательОснование) = Тип("СправочникСсылка.Пользователи") Тогда 
		
		ЗначениеКопирования = ПользовательОснование;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваФорма = Новый Структура;
	СвойстваФорма.Вставить("ПотребоватьСменуПароляПриВходе", Ложь);
	СвойстваФорма.Вставить("СрокДействияНеОграничен", Ложь);
	СвойстваФорма.Вставить("СрокДействия", Дата("00010101"));
	СвойстваФорма.Вставить("ПросрочкаРаботыВПрограммеДоЗапрещенияВхода", 0);
	
	Если ПользовательОбъект.Ссылка.Пустая() Тогда
		СсылкаНового = Справочники.Пользователи.ПолучитьСсылку();
		ПользовательОбъект.УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
	
	Источник = ЗначениеКопирования;
	Приемник = ПользовательОбъект.Ссылка;
	МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
	МодульУправлениеДоступомСлужебный.ПриКопированииПравНовомуПользователю(Источник, Приемник);
	ПользователиСлужебный.СкопироватьГруппыПользователя(Источник, Приемник);

КонецПроцедуры

Процедура УстановитьГруппыДоступаПользователя(ТаблицаГруппДоступа, Пользователь)
	
	Для Каждого СтрокаТаблицы Из ТаблицаГруппДоступа Цикл
		
		ГруппаДоступаОбъект = СтрокаТаблицы.ГруппаДоступа.ПолучитьОбъект();
		
		Если ГруппаДоступаОбъект.Пользователи.Найти(Пользователь, "Пользователь") = Неопределено Тогда
			ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Пользователь;
		КонецЕсли;
		
		ГруппаДоступаОбъект.Записать();
	КонецЦикла;
			
КонецПроцедуры

Функция ПолучитьРолиДоступа(ПраваДоступа)

	МассивРолей		= Новый Массив;
	МассивИменРолей	= СтрРазделить(ПраваДоступа, ";," + Символы.ПС, Ложь);
	
	Для Каждого ИмяРоли Из МассивИменРолей Цикл
		
		МетаданныеРоли = Метаданные.Роли.Найти(СокрЛП(ИмяРоли));
		Если МетаданныеРоли = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивРолей.Добавить(МетаданныеРоли);
		
	КонецЦикла;
	
	Возврат МассивРолей;

КонецФункции // ПолучитьРолиДоступа()

Функция ПолучитьГруппыДоступа(ПраваДоступа)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") 
		Или УправлениеДоступомСлужебный.УпрощенныйИнтерфейсНастройкиПравДоступа() Тогда
		ТаблицаГруппДоступа = Новый ТаблицаЗначений;
		ТаблицаГруппДоступа.Колонки.Добавить("ГруппаДоступа"); 
		
		Возврат ТаблицаГруппДоступа;
	КонецЕсли;
	
	МассивИменГрупп = СтрРазделить(ПраваДоступа, ";," + Символы.ПС, Ложь);
	
	Для ИндексМассива = 0 По МассивИменГрупп.ВГраница() Цикл
		МассивИменГрупп[ИндексМассива] = СокрЛП(МассивИменГрупп[ИндексМассива]);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				|	ГруппыДоступа.Ссылка КАК ГруппаДоступа
				|ИЗ
				|	Справочник.ГруппыДоступа КАК ГруппыДоступа
				|ГДЕ
				|	ГруппыДоступа.Наименование В(&Наименование)
				|	И ГруппыДоступа.Пользователь = НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("Наименование", МассивИменГрупп);
	Результат = Запрос.Выполнить();
	
	ТаблицаГруппДоступа = Результат.Выгрузить();
	
	Возврат ТаблицаГруппДоступа;
		
КонецФункции // ПолучитьГруппыДоступа()

#КонецОбласти
