

Функция ПолучитьСтруктуруПараметровПользователя() Экспорт

	СтруктураПараметровПользователя = Новый Структура;
	
	СтруктураПараметровПользователя.Вставить("Имя");
	СтруктураПараметровПользователя.Вставить("ПолноеИмя");
	СтруктураПараметровПользователя.Вставить("ПользовательОС");
	СтруктураПараметровПользователя.Вставить("Пароль");
	СтруктураПараметровПользователя.Вставить("Почта");
	СтруктураПараметровПользователя.Вставить("ПрофилиРолей");
	СтруктураПараметровПользователя.Вставить("ПользовательОснование");
	
	Возврат СтруктураПараметровПользователя;

КонецФункции // ПолучитьСтруктуруПараметровПользователя()

Процедура СоздатьПолизователяПоПараметрам(ПараметрыПользователя, ЗаполнятьКомментарий = Ложь) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		ВызватьИсключение НСтр("ru = 'Справочник Пользователи недоступен в неразделенном режиме.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ПараметрыПользователя.Имя);
	
	Если ПользовательИБ = Неопределено Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	КонецЕсли;
	
	ПользовательИБ.Имя		= ПараметрыПользователя.Имя;
	ПользовательИБ.ПолноеИмя	= ПараметрыПользователя.ПолноеИмя;
	
	Если ЗначениеЗаполнено(ПараметрыПользователя.ПользовательОС) Тогда
		ПользовательИБ.АутентификацияОС	= Истина;
		ПользовательИБ.ПользовательОС		= ПараметрыПользователя.ПользовательОС;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыПользователя.Пароль) Тогда
		ПользовательИБ.АутентификацияСтандартная	= Истина;
		ПользовательИБ.Пароль				= ПараметрыПользователя.Пароль;
	КонецЕсли;
	
	ПользовательИБ.АдресЭлектроннойПочты = ПараметрыПользователя.Почта;
	ПользовательИБ.Роли.Очистить();
	
	Если ЗначениеЗаполнено(ПараметрыПользователя.ПрофилиРолей) Тогда
		ЗаполнитьРолиПользователяИД(ПользовательИБ, ПараметрыПользователя.ПрофилиРолей);
	КонецЕсли;
	
	ПользовательИБ.Записать();
	
	НачатьТранзакцию(); 
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);    
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
		ЭлементБлокировки.УстановитьЗначение("Наименование", ПользовательИБ.ПолноеИмя);
		
		Блокировка.Заблокировать();
		
		Пользователь = Неопределено;

		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ПользовательИБ.ПолноеИмя);
			
			Если ЗначениеЗаполнено(Пользователь)
			   И ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ)
			   И Пользователь.ИдентификаторПользователяИБ <> ПользовательИБ.УникальныйИдентификатор
			   И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			         Пользователь.ИдентификаторПользователяИБ) <> Неопределено Тогда
				
				Пользователь = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Пользователь = Справочники.Пользователи.СоздатьЭлемент();
			ПользовательСоздан = Истина;
		Иначе
			Пользователь = Пользователь.ПолучитьОбъект();
			ПользовательСоздан = Ложь;
		КонецЕсли;
		
		Пользователь.Наименование = ПользовательИБ.ПолноеИмя;
		
		ОписаниеПользователяИБ = Новый Структура;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(ПараметрыПользователя.ПользовательОснование) Тогда
			ОписаниеПользователяИБ.Вставить("КопироватьПраваПользователя");
		Иначе
			ОписаниеПользователяИБ.Вставить("НеКопироватьПраваПользователя");
		КонецЕсли;
		
		Пользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		
		Если ЗначениеЗаполнено(ПараметрыПользователя.Почта) Тогда
			ЗаполнитьПочтуПользователя(Пользователь, ПараметрыПользователя.Почта);
		КонецЕсли;
		
		Если ЗаполнятьКомментарий И ЗначениеЗаполнено(ПараметрыПользователя.ПользовательОснование) Тогда
			Пользователь.Комментарий = Строка(ПараметрыПользователя.ПользовательОснование);
		КонецЕсли;
		
		Пользователь.Записать();
		
		Если ЗначениеЗаполнено(ПараметрыПользователя.ПользовательОснование) Тогда
			КопироватьПраваПользователя(ПараметрыПользователя.ПользовательОснование, Пользователь);
		КонецЕсли;

		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации("ЗагрузкаПользователей", 
								УровеньЖурналаРегистрации.Ошибка, 
								, 
								, 
								"Ошибка при создании пользоватея: " + ПараметрыПользователя.Имя);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ЗаполнитьРолиПользователяИД(ПользовательИБ, МассивПрофилей)
	
	Если Метаданные.Справочники.Найти("ПрофилиГруппДоступа") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(МассивПрофилей) = Тип("Массив") Тогда
		МассивЗначений = МассивПрофилей;
	ИначеЕсли ТипЗнч(МассивПрофилей) = Тип("Массив") Тогда
		МассивЗначений = СтрРазделить(МассивПрофилей, ";");
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяПрофиля Из МассивЗначений Цикл
		
		ЗначениеПрофиля = Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию(ИмяПрофиля);
		Если ЗначениеЗаполнено(ЗначениеПрофиля) Тогда
			
			Для Каждого РольПрофиля Из ЗначениеПрофиля.Роли Цикл
				ПользовательИБ.Роли.Добавить(Метаданные.Роли[РольПрофиля.Роль.Имя]);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры 

Процедура ЗаполнитьПочтуПользователя(ПользовательОбъект, Почта)
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация(Ложь);
	
	СтрокаКонтактнойИнформации = КонтактнаяИнформация.Добавить();
	
	ТипАдресаПочта = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	
	СтрокаКонтактнойИнформации.Тип = ТипАдресаПочта;
	СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	СтрокаКонтактнойИнформации.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Почта, ТипАдресаПочта);
	СтрокаКонтактнойИнформации.Представление = Почта;
	
	УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(ПользовательОбъект, КонтактнаяИнформация, Истина);

КонецПроцедуры  

Процедура КопироватьПраваПользователя(ПользовательОснование, ПользовательОбъект)
		
	ЗначениеКопирования = Неопределено;
	
	Если ТипЗнч(ПользовательОснование) = Тип("Строка") Тогда
		
		ЗначениеКопирования = Справочники.Пользователи.НайтиПоКоду(ПользовательОснование);
		Если Не ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			ЗначениеКопирования = Справочники.Пользователи.НайтиПоНаименованию(ПользовательОснование);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПользовательОснование) = Тип("СправочникСсылка.Пользователи") Тогда 
		
		ЗначениеКопирования = ПользовательОснование;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваФорма = Новый Структура;
	СвойстваФорма.Вставить("ПотребоватьСменуПароляПриВходе", Ложь);
	СвойстваФорма.Вставить("СрокДействияНеОграничен", Ложь);
	СвойстваФорма.Вставить("СрокДействия", Дата("00010101"));
	СвойстваФорма.Вставить("ПросрочкаРаботыВПрограммеДоЗапрещенияВхода", 0);
	
	//УстановитьПривилегированныйРежим(Истина);
	//ПользователиСлужебный.ЗаписатьСведенияОПользователе(СвойстваФорма, ПользовательОбъект);
	//УстановитьПривилегированныйРежим(Ложь);
	
	Если ПользовательОбъект.Ссылка.Пустая() Тогда
		СсылкаНового = Справочники.Пользователи.ПолучитьСсылку();
		ПользовательОбъект.УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
	
	Источник = ЗначениеКопирования;
	Приемник = ПользовательОбъект.Ссылка;
	МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
	МодульУправлениеДоступомСлужебный.ПриКопированииПравНовомуПользователю(Источник, Приемник);
	ПользователиСлужебный.СкопироватьГруппыПользователя(Источник, Приемник);

КонецПроцедуры
