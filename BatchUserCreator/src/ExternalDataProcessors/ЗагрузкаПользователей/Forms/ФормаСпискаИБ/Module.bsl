

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПутьКФайлуВыгрузки	= Параметры.ПутьКФайлуВыгрузки;
	ПутьКОбработке		= Параметры.ПутьКОбработке;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписанияПередаваемыхФайлов = ПолучитьОписанияФайлов();
	ОбработатьФайлыСпискаБазНаСервере(ОписанияПередаваемыхФайлов);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФайлыСпискаБазНаСервере(ОписанияПереданныхФайлов)
	
	НаборОписанийБаз = Новый Массив;
	Для Каждого ФайлСпискаБаз Из ОписанияПереданныхФайлов Цикл
		ПрочитатьФайлВСтруктуру(ФайлСпискаБаз, НаборОписанийБаз);	
	КонецЦикла;

	ЗаполнитьДеревоСпискомБаз(НаборОписанийБаз);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоСпискомБаз(НаборОписанийБаз)
	
	ЗаполнитьДеревоСпискомБазНаСервере(НаборОписанийБаз);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоСпискомБазНаСервере(НаборОписанийБаз)
	
	ДеревоИнформационныхБаз = РеквизитФормыВЗначение("СписокИнформационныхБаз");
	
	Для Каждого ОписаниеБазы Из НаборОписанийБаз Цикл

		Если ОписаниеБазы.Свойство("Folder") Тогда
			СтрокиРодителя = ПолучитьСтрокиРодителяДереваБаз(ДеревоИнформационныхБаз, ОписаниеБазы.Folder)
		КонецЕсли;

		СтрокаЭлемента = СтрокиРодителя.Найти(ОписаниеБазы.Name, "ИмяБазы", Ложь);
		Если СтрокаЭлемента = Неопределено Тогда
			СтрокаЭлемента = СтрокиРодителя.Добавить();
		КонецЕсли;

		ЗаполнитьСвойстваБазы(СтрокаЭлемента, ОписаниеБазы);
	КонецЦикла;

	ДеревоИнформационныхБаз.Строки.Сортировать("ПолеУпорядочивания", Истина);
	
	ЗначениеВРеквизитФормы(ДеревоИнформационныхБаз, "СписокИнформационныхБаз");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвойстваБазы(СтрокаЭлемента, ОписаниеБазы)

	СтрокаЭлемента.ИмяБазы	 = ОписаниеБазы.Name;
	
	ОписаниеПараметров = НовыйПараметрыЭлементаДереваБаз();
	ЗаполнитьЗначенияСвойств(ОписаниеПараметров, ОписаниеБазы);
	СтрокаЭлемента.ПараметрыЭлемента = ОписаниеПараметров;

	ОписаниеБазы.Свойство("OrderInTree", СтрокаЭлемента.ПолеУпорядочивания);

	ЭтоГруппа = Не ОписаниеБазы.Свойство("Connect");
	СтрокаЭлемента.ЭтоГруппа	 = ?(ЭтоГруппа, -1, 0);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйПараметрыЭлементаДереваБаз()
	
	ПараметрыБазы = Новый Структура;
	ПараметрыБазы.Вставить("Name");
	ПараметрыБазы.Вставить("Connect");
	ПараметрыБазы.Вставить("ID");
	ПараметрыБазы.Вставить("OrderInList");
	ПараметрыБазы.Вставить("Folder");
	ПараметрыБазы.Вставить("OrderInTree");
	ПараметрыБазы.Вставить("External");
	ПараметрыБазы.Вставить("ClientConnectionSpeed");
	ПараметрыБазы.Вставить("App");
	ПараметрыБазы.Вставить("AppArch");
	ПараметрыБазы.Вставить("DefaultApp");
	ПараметрыБазы.Вставить("WA");
	ПараметрыБазы.Вставить("WSA");
	ПараметрыБазы.Вставить("Version");
	ПараметрыБазы.Вставить("DefaultVersion");
	ПараметрыБазы.Вставить("AdditionalParameters");
	ПараметрыБазы.Вставить("WebCommonInfoBaseURL");
	ПараметрыБазы.Вставить("HttpsCA");
	ПараметрыБазы.Вставить("HttpsCert");
	ПараметрыБазы.Вставить("HttpsCAFile");
	ПараметрыБазы.Вставить("HttpsCertFile");
	ПараметрыБазы.Вставить("HttpsCertSelect");
	ПараметрыБазы.Вставить("ShowInList");
	ПараметрыБазы.Вставить("MobilePublicKey");
	ПараметрыБазы.Вставить("WebCommonInfoBases");
	
	Возврат ПараметрыБазы;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтрокиРодителяДереваБаз(ДеревоИнформационныхБаз, ПутьКРодителю)
	
	СоставИерархии = СтрРазделить(ПутьКРодителю, "/", Ложь); 
	СтрокиПоиска = ДеревоИнформационныхБаз.Строки;
	
	Для Каждого ЭлементПути Из СоставИерархии Цикл
		
		НайденнаяСтрока = СтрокиПоиска.Найти(ЭлементПути, "ИмяБазы", Ложь);
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокиПоиска.Добавить();
			НайденнаяСтрока.ИмяБазы = ЭлементПути;
		КонецЕсли;
		
		СтрокиПоиска = НайденнаяСтрока.Строки;
	КонецЦикла;
	
	Возврат СтрокиПоиска;
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьФайлВСтруктуру(ФайлСпискаБаз, НаборОписанийБаз)
	
	ТекстОписанияБазы = Новый ТекстовыйДокумент();
	
	ФайлДляПроверки = Новый Файл(ФайлСпискаБаз);
	
	Если Не ФайлДляПроверки.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОписанияБазы.Прочитать(ФайлСпискаБаз);
	КоличествоСтрок = ТекстОписанияБазы.КоличествоСтрок();
	
	СтруктураПараметровБазы = Неопределено;
	
	Для СчетчикСтрок = 1 По КоличествоСтрок Цикл
		
		СтрокаПараметра = ТекстОписанияБазы.ПолучитьСтроку(СчетчикСтрок);
		Если ПустаяСтрока(СтрокаПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(СтрокаПараметра, "[") И СтрЗаканчиваетсяНа(СтрокаПараметра, "]") Тогда
			
			ДлинаСтроки = СтрДлина(СтрокаПараметра);
			СтрокаПараметра = Сред(СтрокаПараметра, 2, ДлинаСтроки - 2);
			
			Если ЗначениеЗаполнено(СтруктураПараметровБазы) Тогда
				НаборОписанийБаз.Добавить(СтруктураПараметровБазы);
			КонецЕсли;
			
			СтруктураПараметровБазы = Новый Структура;
			СтруктураПараметровБазы.Вставить("Name", СтрокаПараметра);
			
		ИначеЕсли ЗначениеЗаполнено(СтруктураПараметровБазы) Тогда
			
			ПозицияРазделителя = СтрНайти(СтрокаПараметра, "=");
			
			КлючПараметра = Лев(СтрокаПараметра, ПозицияРазделителя - 1);
			ЗначениеПараметра = Сред(СтрокаПараметра, ПозицияРазделителя + 1);
			
			СтруктураПараметровБазы.Вставить(КлючПараметра, ЗначениеПараметра);
		
		КонецЕсли;
		
	КонецЦикла;
	
	НаборОписанийБаз.Добавить(СтруктураПараметровБазы);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписанияФайлов()
	
	МассивОписанийФайлов = Новый Массив;
	КаталогНастроек = КаталогВременныхФайлов();
	
	Если ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		КаталогНастроек = СтрЗаменить(КаталогНастроек, "\Local\Temp\", "\Roaming\1C\1CEStart\");
	ИначеЕсли ОбщегоНазначенияКлиент.ЭтоLinuxКлиент()
				Или  ОбщегоНазначенияКлиент.ЭтоMacOSКлиент() Тогда

		КаталогНастроек		= РабочийКаталогДанныхПользователя();
		Разделитель			= "/.1cv8/";
		ПоложениеРазделителя	= СтрНайти(КаталогНастроек, Разделитель);
		
		КаталогНастроек = Лев(КаталогНастроек, ПоложениеРазделителя - 1) + "/.1C/1cestart/";
	КонецЕсли;
	
	ПутиКФайламБаз = НайтиФайлы(КаталогНастроек, "*.v8i");
	Для Каждого ФайлБаз Из ПутиКФайламБаз Цикл
		МассивОписанийФайлов.Добавить(ФайлБаз.ПолноеИмя);
	КонецЦикла;
	
	Файлы_1cestart = НайтиФайлы(КаталогНастроек, "1cestart.cfg");
	Если Не ЗначениеЗаполнено(Файлы_1cestart) Тогда
		Возврат МассивОписанийФайлов;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(Файлы_1cestart[0].ПолноеИмя, 
											КодировкаТекста.UTF8, 
											Символы.ПС, 
											Символы.ВК + Символы.ПС);
	
	СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
	Пока СтрокаТекста <> Неопределено Цикл
		Если СтрНайти(СтрокаТекста, "CommonInfoBases=") Тогда
			СтрокаТекста = СтрЗаменить(СтрокаТекста, "CommonInfoBases=", "");
			МассивОписанийФайлов.Добавить(СтрокаТекста);
		КонецЕсли;
		
		СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	
	Возврат МассивОписанийФайлов;

КонецФункции

&НаКлиенте
Функция ПолучитьПутьКВерсииПлатформы(ПараметрыЭлемента, Знач ВерсияПлатформы)
	
	Если ПараметрыЭлемента.Свойство("Version") 
		И ЗначениеЗаполнено(ПараметрыЭлемента.Version) Тогда
		ВерсияПлатформы = ПараметрыЭлемента.Version;
	КонецЕсли;
	
	СистемнаяИнформация			= Новый СистемнаяИнформация;
	ТекущаяВерсияПлатформы		= СистемнаяИнформация.ВерсияПриложения;
	КаталогПрограммы			= КаталогПрограммы();
	ПозицияРазделителя			= СтрНайти(КаталогПрограммы, ТекущаяВерсияПлатформы);
	КаталогУстановкиПлатформы	= Лев(КаталогПрограммы, ПозицияРазделителя - 1);
	
	МассивКаталогов = НайтиФайлы(КаталогУстановкиПлатформы, ВерсияПлатформы + "*", Ложь);
	
	Если МассивКаталогов.Количество() = 0 Тогда
		ВызватьИсключение "Отсутствует подходящая версия платформы - " + ВерсияПлатформы;
	Иначе
		ТекущаяВерсияПлатформы = МассивКаталогов[0].Имя;
	КонецЕсли;
	
	Для Каждого Каталог Из МассивКаталогов Цикл
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Каталог.Имя, ТекущаяВерсияПлатформы) > 0 Тогда
			ТекущаяВерсияПлатформы = Каталог.Имя;
		КонецЕсли;
	КонецЦикла;
	
	ПутьКПрограмме = КаталогУстановкиПлатформы + ТекущаяВерсияПлатформы + ПолучитьРазделительПутиКлиента();
	
	Если ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		ПутьКПрограмме = ПутьКПрограмме + "bin\";
	КонецЕсли;
	
	Если ПараметрыЭлемента.Свойство("DefaultApp") 
		И ПараметрыЭлемента.DefaultApp = "ThinkClient" Тогда
		ИмяФайлаПрограммы = "1cv8c";
	Иначе
		ИмяФайлаПрограммы = "1cv8";
	КонецЕсли;
	
	ПутьКПрограмме = """" + ПутьКПрограмме + ИмяФайлаПрограммы + """";
	
	Возврат ПутьКПрограмме;

КонецФункции 

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// Код процедур и функций

#КонецОбласти
#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокИнформационныхБаз
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	ЗапуститьОбработкуДляВнешнейБазы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбработкуДляВнешнейБазы()
	
	НаборБазДляЗапуска = Новый Массив;
	ЭлементыДереваБаз = СписокИнформационныхБаз.ПолучитьЭлементы();
	ЗаполнитьОписанияБазДляЗапуска(ЭлементыДереваБаз, НаборБазДляЗапуска);
	
	ВыполнитьЗапускОбработки(НаборБазДляЗапуска);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапускОбработки(НаборБазДляЗапуска)
	
	//Получить путь к программе 1С не зависимо от ОС
	ПутьКПрограмме = КаталогПрограммы();
	//ШаблонСтрокиЗапуска = "%1 ENTERPRISE /IBConnectionString %2 WA+ /C ""Загрузить %3"" /Execute ""%4"" /DisableStartupMessages /DisableStartupDialogs";
	ШаблонСтрокиЗапуска = "%1 ENTERPRISE %2 WA+ /C ""Загрузить %3"" /Execute ""%4"" /DisableStartupMessages ";
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	
	Для Каждого ПараметрыЭлемента Из НаборБазДляЗапуска Цикл
		
		ПутьКПрограмме = ПолучитьПутьКВерсииПлатформы(ПараметрыЭлемента, ВерсияПлатформы);
		
		//REF: Получать параметры из описания базы - версия платформы
		//ЗначенияПараметровЗапуска = ПолучитьЗначенияПараметровЗапуска(ПараметрыЭлемента);
		//СтрокаЗапуска = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(ШаблонСтрокиЗапуска, ЗначенияПараметровЗапуска); 
		
		ПутьКПрограмме		= ЗаменитьРазделителиПути(ПутьКПрограмме);
		ПутьКОбработке		= ЗаменитьРазделителиПути(ПутьКОбработке);
		ПутьКФайлуВыгрузки	= ЗаменитьРазделителиПути(ПутьКФайлуВыгрузки);
		
		СтрокаПодключения = ПреобразоватьСтрокуПодключения(ПараметрыЭлемента.Connect);
		
		СтрокаЗапуска = СтрШаблон(ШаблонСтрокиЗапуска, 
										//ВерсияПлатформы, 
										ПутьКПрограмме,
										СтрокаПодключения,
										ПутьКФайлуВыгрузки,
										ПутьКОбработке);
		
		ПараметрыЗапуска = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
		ПараметрыЗапуска.ДождатьсяЗавершения = Не ВыполнятьЗагрузкуПараллельно;
		ПараметрыЗапуска.Оповещение = Новый ОписаниеОповещения("ПриПолученииРезультатаЗапускаПрограммы", ЭтотОбъект);
		ФайловаяСистемаКлиент.ЗапуститьПрограмму(СтрокаЗапуска, ПараметрыЗапуска);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ЗаменитьРазделителиПути(Знач СтрокаПути);
	
	СоставПути = СтрРазделить(СтрокаПути, "/\", Истина);
	
	Возврат СтрСоединить(СоставПути, ПолучитьРазделительПутиКлиента());
	
КонецФункции

&НаКлиенте
Функция ПреобразоватьСтрокуПодключения(Знач СтрокаПодключения);
	
	СтрокаПодключения = СтрЗаменить(СтрокаПодключения, "Srvr=",		"/S ");
	СтрокаПодключения = СтрЗаменить(СтрокаПодключения, "File=",		"/F ");
	СтрокаПодключения = СтрЗаменить(СтрокаПодключения, """;Ref=""",	"\");
	СтрокаПодключения = СтрЗаменить(СтрокаПодключения, ";",			"");
	
	Возврат СтрокаПодключения;
	
КонецФункции

&НаКлиенте
Процедура ПриПолученииРезультатаЗапускаПрограммы(Результат, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПотокОшибок);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначенияПараметровЗапуска(ПараметрыЭлемента)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(ВерсияПлатформы);
	МассивЗначений.Добавить(ПараметрыЭлемента.Connection);

	Возврат МассивЗначений;

КонецФункции

// Заполняет набор баз для запуска на основании элементов дерева баз.
//
// Параметры:
//  ЭлементыДереваБаз - ДанныеФормыКоллекцияЭлементовДерева - Список элементов дерева баз.
//  НаборБазДляЗапуска - Массив из структуры см. НовыйПараметрыЭлементаДереваБаз - Массив для заполнения параметрами элементов дерева баз.
//
&НаКлиенте
Процедура ЗаполнитьОписанияБазДляЗапуска(ЭлементыДереваБаз, НаборБазДляЗапуска)
	
	Для Каждого ЭлементДерева Из ЭлементыДереваБаз Цикл
		
		Если ЭлементДерева.ЭтоГруппа Тогда
			ЗаполнитьОписанияБазДляЗапуска(ЭлементДерева.ПолучитьЭлементы(), НаборБазДляЗапуска);
			Продолжить;
		КонецЕсли;
		
		Если ЭлементДерева.Использовать Тогда
			НаборБазДляЗапуска.Добавить(ЭлементДерева.ПараметрыЭлемента);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СписокИнформационныхБазВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанныеСтроки = Элементы.СписокИнформационныхБаз.ТекущиеДанные; 
	
	Если ТекущиеДанныеСтроки = Неопределено
		Или ТекущиеДанныеСтроки.ЭтоГруппа = -1 Тогда
		Возврат;
	Иначе
		МассивСтрокПараметров = Новый Массив;
		Для Каждого ЭлементПараметров Из ТекущиеДанныеСтроки.ПараметрыЭлемента Цикл 
			Если Не ЗначениеЗаполнено(ЭлементПараметров.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПараметра = Новый ФорматированнаяСтрока(ЭлементПараметров.Ключ + ": ", 
															Новый ФорматированнаяСтрока(ЭлементПараметров.Значение, Новый Шрифт(, , Истина)), 
															Символы.ПС);
			
			МассивСтрокПараметров.Добавить(СтрокаПараметра);
			
			//СтрокаВывода = СтрокаВывода + ЭлементПараметров.Ключ + ": " + ЭлементПараметров.Значение + Символы.ПС;
		КонецЦикла;
		
		ПоказатьПредупреждение(, Новый ФорматированнаяСтрока(МассивСтрокПараметров));
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти
