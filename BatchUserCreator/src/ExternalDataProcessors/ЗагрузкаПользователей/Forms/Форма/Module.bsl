

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КолонкаПолногоИмени		= 1;
	КолонкаИмени				= 2;
	КолонкаПочты				= 3;
	КолонкаПользователяОС	= 4;
	КолонкаПароля				= 5;
	КолонкаПравДоступа		= 6;
	КолонкаКомментария		= 7;
	
	ТабличныйДокумент.ФиксацияСверху = 1;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	СоставВерсии = СтрРазделить(СистемнаяИнформация.ВерсияПриложения, ".");
	НомерРелизаПлатформы = СоставВерсии[2];
	
	МассивМинимальноВерсии = Новый Массив;
	МассивМинимальноВерсии.Добавить(3);
	МассивМинимальноВерсии.Добавить(1);
	МассивМинимальноВерсии.Добавить(3);
	
	ТекстОшибки = "";
	Если Метаданные.ОбщиеМодули.Найти("СтандартныеПодсистемыСервер") = Неопределено Тогда
		ВызватьИсключение "Отсутсвует БСП";
	Иначе
		Результат = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
		МассивВерсии = СтрРазделить(Результат, ".");
		Если Не (Число(МассивВерсии[0]) >= МассивМинимальноВерсии[0] 
			И Число(МассивВерсии[1]) >= МассивМинимальноВерсии[1] 
			И Число(МассивВерсии[2]) >= МассивМинимальноВерсии[2]) Тогда
			
			ВызватьИсключение "Текущая версия БСП не поддерживается";	
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаплолнитьНастройкиПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(ПараметрЗапуска, "Загрузить", , 1) Тогда
		
		Отказ = Истина;
		
		ПутьКФайлу = СокрЛП(СтрЗаменить(ПараметрЗапуска, "Загрузить", ""));
		ДанныеДляЗагрузки = ПолучитьДанныеИзФайла(ПутьКФайлу);
		ЗагрузитьПользователейНаСервере(ДанныеДляЗагрузки);

		ЗавершитьРаботуСистемы(Ложь);
		Возврат;
		
	ИначеЕсли СтрНайти(ПараметрЗапуска, "Генерировать", , 1) Тогда
		
		Отказ = Истина;

		ЗавершитьРаботуСистемы(Ложь);
		Возврат;
		
	КонецЕсли;
	
	УстановитьОтображениеЭлементов();
	
КонецПроцедуры  

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТабличныйДокументПриИзменении(Элемент)
	
	Если Не Автозаполнение Тогда
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки		= Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх;
	НомерПоследнейСтроки	= Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ;
	
	Если НомерПервойСтроки = 0 Или НомерПоследнейСтроки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НомерКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	МассивУникальныхИмен = Новый Массив;
	
	Если НомерКолонки = 1 Тогда
		Для НомерСтроки = НомерПервойСтроки По НомерПоследнейСтроки Цикл
			ЗаполнитьПараметрыВСтроке(НомерСтроки, МассивУникальныхИмен);
		КонецЦикла;
	КонецЕсли;
	
	ПроверитьУникальностьЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольХранимоеЗначениеПриИзменении(Элемент)
	
	УстановитьОтображениеЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантУстановкиДоступаПриИзменении(Элемент)
	
	Если ВариантУстановкиДоступа = 1 Тогда
		ДанныеПравДоступа = "";
		ТабличныйДокумент.Область("ПраваДоступа").Текст = "Группы доступа";
	Иначе
		ДанныеПравДоступа = ПолучитьИмяТекущегоПользователя();
		ТабличныйДокумент.Область("ПраваДоступа").Текст = "Пользователь основание";
	КонецЕсли;
	
	ЗаполнитьДанныеКолонки(КолонкаПравДоступа, ДанныеПравДоступа, Ложь); //Истина
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПравДоступаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВариантУстановкиДоступа = 1 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора",		Истина);
		ПараметрыФормы.Вставить("МножественныйВыбор",	Истина);
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОповещенияВыбораПравДоступа", ЭтотОбъект);
		ОткрытьФорму("Справочник.ГруппыДоступа.Форма.ФормаСписка", ПараметрыФормы, Элемент, ЭтаФорма, , , ОповещениеОЗакрытии);
	ИначеЕсли ВариантУстановкиДоступа = 0 Тогда
		ПараметрыФормы = Новый Структура;
		//ПараметрыФормы.Вставить("РежимВыбора",		Истина);
		ПараметрыФормы.Вставить("МножественныйВыбор",	Ложь);
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОповещенияВыбораПравДоступа", ЭтотОбъект);
		ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбора", ПараметрыФормы, Элемент, ЭтаФорма, , , ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ИмпортироватьИзФайла(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "Файл JSON(*.json)|*.json";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	
	РезультатВыбора = Ждать ДиалогВыбораФайла.ВыбратьАсинх();
	
	Если РезультатВыбора.Количество() = 1 Тогда
	
		//ТабличныйДокумент = ПолучитьДанныеИзФайла(РезультатВыбора[0]);
		ПрочитатьДанныеИзJSON(РезультатВыбора[0]);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Асинх Процедура ЭкспортироватьВФайл(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.ПолноеИмяФайла = ""; // Указать имя базы
	ДиалогВыбораФайла.Фильтр = "Файл JSON(*.json)|*.json";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	
	РезультатВыбора	= Ждать ДиалогВыбораФайла.ВыбратьАсинх();
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьДанныеВJSON(РезультатВыбора[0]);
	
	ПоказатьПредупреждение(, "Данные сохранены");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	ОчиститьПолеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСлучайныхПользователей(Команда)
	
	НомерПервойСтроки = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент = ЗаполнитьСлучайныхПользователейНаСервере();
	
	НомерПоследнейСтроки = ТабличныйДокумент.ВысотаТаблицы;
	
	МассивУникальныхИмен = Новый Массив;
	
	Для НомерСтроки = НомерПервойСтроки По НомерПоследнейСтроки Цикл
		ЗаполнитьПараметрыВСтроке(НомерСтроки, МассивУникальныхИмен);
	КонецЦикла;

	//ПроверитьУникальностьЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПользователя(Команда)
	
	ВыполнитьСозданиеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПользователей(Команда)
	
	ДанныеДляЗагрузки = ПолучитьДанныеТабличногоДокумента();
	ЗагрузитьПользователейНаСервере(ДанныеДляЗагрузки);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьНастройки(Команда)
	
	Элементы.ГруппаНастройки.Видимость = Не Элементы.ГруппаНастройки.Видимость;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


&НаСервере
Процедура ЗаплолнитьНастройкиПоУмолчанию()

	Автозаполнение = Истина;
	
	АутентификацияСтандартная		= Истина;
	ПотребоватьСменуПароляПриВходе	= Ложь;
	ПоказыватьВСпискеВыбора		= Истина;
	ЗапрещеноИзменятьПароль		= Ложь;
	
	АутентификацияОС				= Истина;
	АутентификацияOpenID			= Ложь;
	АутентификацияOpenIDConnect	= Ложь;
	
	ШаблонПочты	= "%1@mail.me";
	ШаблонДомена	= "\\localhost\%1";
	
	ПарольХранимоеЗначение	= 0;
	ВариантУстановкиДоступа	= 0;
	
	ДанныеПравДоступа = ПолучитьИмяТекущегоПользователя();
		
	КоличествоПользователей = 100; 
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяТекущегоПользователя()

	#Если Клиент Тогда
	
	ТекущийПользователь	= ПользователиКлиент.ТекущийПользователь();
	ИмяПользователя		= Строка(ТекущийПользователь);
	
	#ИначеЕсли Сервер Тогда

	ТекущийПользователь	= Пользователи.ТекущийПользователь();
	ИмяПользователя		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Наименование");

	#КонецЕсли 

	Возврат ИмяПользователя;
	
КонецФункции // ПолучитьИмяТекущегоПользователя()

&НаКлиенте
Процедура УстановитьОтображениеЭлементов()
	
	Если ПарольХранимоеЗначение = 1 Тогда
		ТабличныйДокумент.Область("Пароль").Текст = "Хранимое значение";
	Иначе
		ТабличныйДокумент.Область("Пароль").Текст = "Пароль";
	КонецЕсли;
	
	Элементы.ГруппаЗаполнениеПароля.Доступность = ПарольХранимоеЗначение = 0;
	
	
	
	
КонецПроцедуры


&НаКлиенте
Функция ПолучитьДанныеИзФайла(ПутьКФайлу)
	
	ТаблицаДанных = Новый ТабличныйДокумент;
	
	СоставПолей = Новый Массив;
	СоставПолей.Добавить("ПолноеИмя");
	СоставПолей.Добавить("Имя");
	СоставПолей.Добавить("Почта");
	СоставПолей.Добавить("ПользовательОС");
	СоставПолей.Добавить("Пароль");
	СоставПолей.Добавить("ПраваДоступа");
	СоставПолей.Добавить("ПользовательОснование");
	
	СчетчикСтрок = 1;
	
	ЗаполнитьПараметрыСтроки(ТаблицаДанных, СоставПолей, СчетчикСтрок);
	
	ТекстДанных = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.UTF8);
	
	СтрокаДанных = ТекстДанных.ПрочитатьСтроку();

	Пока СтрокаДанных <> Неопределено Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		
		Если СтрНачинаетсяС(СтрокаДанных, "#") Тогда
			СтрокаДанных = ТекстДанных.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;
		
		МассивЗначенийПараметров = СтрРазделить(СтрокаДанных, "|");
		
		ЗаполнитьПараметрыСтроки(ТаблицаДанных, МассивЗначенийПараметров, СчетчикСтрок);
		
		СтрокаДанных = ТекстДанных.ПрочитатьСтроку();
	КонецЦикла;
	
	ТекстДанных.Закрыть();
	
	Возврат ТаблицаДанных;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПараметрыСтроки(ТаблицаДанных, МассивЗначений, НомерСтроки)
	
	Для ИндексПараметра = 0 По МассивЗначений.ВГраница() Цикл
		Область = ТаблицаДанных.Область(НомерСтроки, ИндексПараметра + 1, НомерСтроки, ИндексПараметра + 1);
		Область.Текст = МассивЗначений[ИндексПараметра];
		
		Если НомерСтроки = 1 Тогда
			Область.ЦветФона		= WebЦвета.СветлоСерый;
			Область.ВысотаСтроки	= 20;
			Область.ШиринаКолонки	= 25; //СтрДлина(Область.Текст) + 2;
			
			Область.ВертикальноеПоложение	= ВертикальноеПоложение.Центр;
			Область.ГоризонтальноеПоложение	= ГоризонтальноеПоложение.Центр;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Функция ЗаполнитьСлучайныхПользователейНаСервере()
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	НаборФИОПользователей = ОбъектОбработка.ПолучитьФИОСлучайныхПользователей(КоличествоПользователей, Постфикс);
	
	ДополнениеТабличногоДокумента = Новый ТабличныйДокумент;
	
	СвойстваПароля = Пользователи.СвойстваПароля();
	СчетчикСтрок = 1;
	Для Каждого ФИОПользователя Из НаборФИОПользователей Цикл
		ДополнениеТабличногоДокумента.Область(СчетчикСтрок, КолонкаПолногоИмени, 
											СчетчикСтрок, КолонкаПолногоИмени).Текст = ФИОПользователя;
		Если СпособУстановкиПароля = 0 Тогда
			НовыйПароль = ПолучитьНовыйПароль(СвойстваПароля, НомерРелизаПлатформы); 
		Иначе
			НовыйПароль = ПарольПоУмолчанию; 
		КонецЕсли;
		
		ДополнениеТабличногоДокумента.Область(СчетчикСтрок, КолонкаПароля, 
											СчетчикСтрок, КолонкаПароля).Текст = НовыйПароль;
		
		
		ДополнениеТабличногоДокумента.Область(СчетчикСтрок, КолонкаПравДоступа, 
											СчетчикСтрок, КолонкаПравДоступа).Текст = ДанныеПравДоступа;
											
		ДополнениеТабличногоДокумента.Область(СчетчикСтрок, КолонкаКомментария, 
											СчетчикСтрок, КолонкаКомментария).Текст = Комментарий;

		СчетчикСтрок = СчетчикСтрок + 1;
	КонецЦикла;
	
	УстановитьСлучайныхПользователейОснованийНаСервере(ДополнениеТабличногоДокумента, КолонкаПравДоступа);
	
	ТабличныйДокумент.Вывести(ДополнениеТабличногоДокумента);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ЗаполнитьСлучайныхПользователейНаСервере()


&НаСервереБезКонтекста
Функция УстановитьСлучайныхПользователейОснованийНаСервере(ТабличныйДокумент, КолонкаДанных)

	МассивПользователей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Наименование КАК Пользователь,
	               |	Пользователи.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	НЕ Пользователи.ПометкаУдаления
	               |	И НЕ Пользователи.Недействителен
	               |	И Пользователи.Наименование <> """"
	               |	И НЕ Пользователи.Предопределенный
	               |	И Пользователи.Наименование <> ""<Не указан>""
	               |	И НЕ Пользователи.Служебный";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Результат.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю("Пользователи не найдены");
		ВызватьИсключение "Пользователи не найдены";
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Пользователи.ЭтоПолноправныйПользователь(Выборка.Ссылка, Истина)
			И Пользователи.ВходВПрограммуРазрешен(Выборка.Ссылка) Тогда
			МассивПользователей.Добавить(Выборка.Пользователь);
		КонецЕсли;
	
	КонецЦикла;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	Количество = ТабличныйДокумент.ВысотаТаблицы;
	
	Для СчетчикСтрок = 2 По Количество Цикл
		СлучайноеЧисло = ГСЧ.СлучайноеЧисло(0, МассивПользователей.ВГраница());
		СлучайныйПользователь = МассивПользователей[СлучайноеЧисло];
		
		ТабличныйДокумент.Область(СчетчикСтрок, КолонкаДанных, 
										СчетчикСтрок, КолонкаДанных).Текст = СлучайныйПользователь;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ВыполнитьСозданиеНаСервере()

	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	СтруктураПараметров = ОбъектОбработка.ПолучитьСтруктуруПараметровПользователя();
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	ОбъектОбработка.СоздатьПолизователяПоПараметрам(СтруктураПараметров);

КонецПроцедуры // ВыполнитьСозданиеНаСервере()


&НаКлиенте
Функция ПолучитьДанныеТабличногоДокумента()

	СоставПользователей = Новый Массив;
	
	КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы;
	Для СчетчикСтрок = 2 По КоличествоСтрок Цикл
		
		ОписаниеПользователя = ПолучитьОписаниеПользователя();
	
		ЗаполнитьЗначенияСвойств(ОписаниеПользователя, ЭтотОбъект);
		
		ОписаниеПользователя.Имя 					= ТабличныйДокумент.Область(СчетчикСтрок, КолонкаИмени, 
																		СчетчикСтрок, КолонкаИмени).Текст;
		ОписаниеПользователя.ПолноеИмя				= ТабличныйДокумент.Область(СчетчикСтрок, КолонкаПолногоИмени, 
																		СчетчикСтрок, КолонкаПолногоИмени).Текст;
		ОписаниеПользователя.АдресЭлектроннойПочты	= ТабличныйДокумент.Область(СчетчикСтрок, КолонкаПочты, 
																		СчетчикСтрок, КолонкаПочты).Текст;
		ОписаниеПользователя.ПользовательОС			= ТабличныйДокумент.Область(СчетчикСтрок, КолонкаПользователяОС, 
																		СчетчикСтрок, КолонкаПользователяОС).Текст;
		ОписаниеПользователя.Комментарий			= ТабличныйДокумент.Область(СчетчикСтрок, КолонкаКомментария, 
																		СчетчикСтрок, КолонкаКомментария).Текст;	
		Пароль		= ТабличныйДокумент.Область(СчетчикСтрок, КолонкаПароля, СчетчикСтрок, КолонкаПароля).Текст;
		ПраваДоступа	= ТабличныйДокумент.Область(СчетчикСтрок, КолонкаПравДоступа, СчетчикСтрок, КолонкаПравДоступа).Текст;
		
		Если ПарольХранимоеЗначение = 0 Тогда
			ОписаниеПользователя.Пароль = Пароль;
			ОписаниеПользователя.ПарольУстановлен = Ложь;
			ОписаниеПользователя.СохраняемоеЗначениеПароля = "";
		Иначе
			ОписаниеПользователя.Пароль = "";
			ОписаниеПользователя.ПарольУстановлен = Истина;
			ОписаниеПользователя.СохраняемоеЗначениеПароля = Пароль;
		КонецЕсли;
		
		ОписаниеПользователя.ГруппыДоступа = "";
		ОписаниеПользователя.ПользовательОснование = "";
		
		Если ВариантУстановкиДоступа = 0 Тогда
			ОписаниеПользователя.ПользовательОснование = ПраваДоступа;
		ИначеЕсли ВариантУстановкиДоступа = 1 Тогда
			ОписаниеПользователя.ГруппыДоступа = ПраваДоступа;
		КонецЕсли;
		
		СоставПользователей.Добавить(ОписаниеПользователя);
		
	КонецЦикла;
	
	Возврат СоставПользователей;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеПользователя()
	
	ОписаниеПользователя = Новый Структура;
	ОписаниеПользователя.Вставить("Имя");
	ОписаниеПользователя.Вставить("ПолноеИмя");
	ОписаниеПользователя.Вставить("АдресЭлектроннойПочты");
	
	ОписаниеПользователя.Вставить("Пароль");
	ОписаниеПользователя.Вставить("СохраняемоеЗначениеПароля");
	
	ОписаниеПользователя.Вставить("ПоказыватьВСпискеВыбора");
	ОписаниеПользователя.Вставить("ЗапрещеноИзменятьПароль");
	ОписаниеПользователя.Вставить("ЗапрещеноВосстанавливатьПароль");
	ОписаниеПользователя.Вставить("ПарольУстановлен"); //Если свойство ПарольУстановлен = Ложь, тогда в незаполненное свойство СохраняемоеЗначениеПароля устанавливается новое сгенерированное значение пароля
	
	ОписаниеПользователя.Вставить("ПользовательОС");
	
	ОписаниеПользователя.Вставить("ПотребоватьСменуПароляПриВходе");
	ОписаниеПользователя.Вставить("АутентификацияСтандартная");
	ОписаниеПользователя.Вставить("АутентификацияOpenID");
	ОписаниеПользователя.Вставить("АутентификацияOpenIDConnect");
	ОписаниеПользователя.Вставить("АутентификацияТокеномДоступа");
	ОписаниеПользователя.Вставить("АутентификацияОС");
	
	ОписаниеПользователя.Вставить("ГруппыДоступа");
	ОписаниеПользователя.Вставить("ПользовательОснование");
	ОписаниеПользователя.Вставить("Комментарий");
	
	ОписаниеПользователя.Вставить("РежимЗапуска", "Авто");
	ОписаниеПользователя.Вставить("ЗащитаОтОпасныхДействий", Истина);
	
	Возврат ОписаниеПользователя;
	
КонецФункции


&НаСервере
Процедура ЗагрузитьПользователейНаСервере(ДанныеДляЗагрузки)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	ОбъектОбработка.ВыполнитьЗагрузкуПользователей(ДанныеДляЗагрузки);

КонецПроцедуры


&НаКлиенте
Процедура ПроверитьУникальностьЗначений()
	
	ПолныеИмена			= Новый Массив;
	КраткиеИмена			= Новый Массив;
	ПользователиОС		= Новый Массив;
	ПочтаПользователей	= Новый Массив;
	
	Для НомерСтроки = 2 По ТабличныйДокумент.ВысотаТаблицы Цикл
		ПроверитьЗначениеСтроки(ПолныеИмена,		НомерСтроки, 1);
		ПроверитьЗначениеСтроки(КраткиеИмена,		НомерСтроки, 2);
		ПроверитьЗначениеСтроки(ПользователиОС,		НомерСтроки, 3);
		ПроверитьЗначениеСтроки(ПочтаПользователей,	НомерСтроки, 4);
	КонецЦикла;
	
КонецПроцедуры // ПроверитьУникальностьЗначений()

&НаКлиенте
Процедура ПроверитьЗначениеСтроки(МассивЗначений, НомерСтроки, НомерКолонки)

	ОбластьЗначений = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
	
	Если МассивЗначений.Найти(ОбластьЗначений.Текст) = Неопределено Тогда
		МассивЗначений.Добавить(ОбластьЗначений.Текст);
		ОбластьЗначений.ЦветФона	= Новый Цвет;
		ОбластьЗначений.ЦветТекста	= Новый Цвет;
	Иначе
		ОбластьЗначений.ЦветФона	= WebЦвета.Льняной;
		ОбластьЗначений.ЦветТекста	= WebЦвета.ТемноКрасный;
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон("В строке %1 в колонке %2 указано неуникальное значение!", 
															НомерСтроки, НомерКолонки));
	КонецЕсли;

КонецПроцедуры // ПроверитьЗначениеСтроки()

&НаКлиенте
Процедура ЗаполнитьПараметрыВСтроке(НомерСтроки, МассивУникальныхИмен);
	
	СтруктураЗначений = Новый Структура;
	СтруктураЗначений.Вставить("КраткоеИмя",			"");
	СтруктураЗначений.Вставить("ПочтаПользователя",	"");
	СтруктураЗначений.Вставить("ПользовательОС",		"");
	СтруктураЗначений.Вставить("Пароль",			"");
	СтруктураЗначений.Вставить("ПраваДоступа",		"");
	СтруктураЗначений.Вставить("Комментарий",		"");
	
	ОбластьПолноеИмя = ТабличныйДокумент.Область(НомерСтроки, КолонкаПолногоИмени, 
													НомерСтроки, КолонкаПолногоИмени);
	ПолноеИмя = УдалитьСимволы(ОбластьПолноеИмя.Текст);
	Если ПустаяСтрока(ПолноеИмя) Тогда
		ЗаполнитьТекстЯчеек(НомерСтроки, СтруктураЗначений); 
		Возврат;
	КонецЕсли;	
		
	СтруктураИмени = ЧастиИмени(ПолноеИмя);
	
	ПривестиКУникальнымИмена(СтруктураИмени, МассивУникальныхИмен);
	СтруктураЗначений.КраткоеИмя = СтруктураИмени.ИмяПользователяИБ;
	
	ИмяЛатиницей = НРег(СтроковыеФункцииКлиент.СтрокаЛатиницей(СтруктураИмени.КраткоеФИО));
	
	СтруктураЗначений.ПочтаПользователя	= СтрШаблон(ШаблонПочты,	ИмяЛатиницей);
	СтруктураЗначений.ПользовательОС	= СтрШаблон(ШаблонДомена,	ИмяЛатиницей);
	
	Если ЗначениеЗаполнено(ПарольПоУмолчанию) Тогда
		СтруктураЗначений.Пароль = ПарольПоУмолчанию;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПравДоступа) Тогда
		СтруктураЗначений.ПраваДоступа = ДанныеПравДоступа;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Комментарий) Тогда
		СтруктураЗначений.Комментарий = Комментарий;
	КонецЕсли;
	
	ЗаполнитьТекстЯчеек(НомерСтроки, СтруктураЗначений);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПривестиКУникальнымИмена(СтруктураИмени, МассивУникальныхИмен, СчетчикДублей = 0)
	
	ДопСимволИмени	= Макс(1, Окр(СчетчикДублей / 2));
	ДопСимволОтчества	= Макс(1, СчетчикДублей - ДопСимволИмени);
	
	ДопСимволИмени	= Мин(ДопСимволИмени,		СтрДлина(СтруктураИмени.Имя));
	ДопСимволОтчества	= Мин(ДопСимволОтчества,	СтрДлина(СтруктураИмени.Отчество));
	
	КраткоеФИО = Лев(СтруктураИмени.Имя, ДопСимволИмени) 
				+ Лев(СтруктураИмени.Отчество, ДопСимволОтчества)
				+ СтруктураИмени.Фамилия;
	ИмяПользователяИБ = СтруктураИмени.Фамилия 
				+ Лев(СтруктураИмени.Имя, ДопСимволИмени)
				+ Лев(СтруктураИмени.Отчество, ДопСимволОтчества);
				
	ДубльЗначения = МассивУникальныхИмен.Найти(КраткоеФИО);
	Если ДубльЗначения = Неопределено Тогда
		МассивУникальныхИмен.Добавить(КраткоеФИО);
		СтруктураИмени.ИмяПользователяИБ	= ИмяПользователяИБ;
		СтруктураИмени.КраткоеФИО			= КраткоеФИО;
	Иначе
		СчетчикДублей = СчетчикДублей + 1;
		ПривестиКУникальнымИмена(СтруктураИмени, МассивУникальныхИмен, СчетчикДублей);
	КонецЕсли;

КонецПроцедуры // ПолучитьУникальноеИмя()


&НаСервереБезКонтекста
Функция ПолучитьНовыйПароль(СвойстваПароля, НомерРелизаПлатформы)
	
	ДлинаПароля		= 7;
	СложныйПароль	= Ложь;
	
	Для Каждого ПарольнаяПолитика Из ПолитикиПаролейПользователей.ПолучитьПолитики() Цикл
		ДлинаПароля		= Макс(ПарольнаяПолитика.МинимальнаяДлинаПаролей, ДлинаПароля);
		СложныйПароль	= Макс(ПарольнаяПолитика.ПроверкаСложностиПаролей, СложныйПароль);
	КонецЦикла;
	
	СвойстваПароля.НаименьшаяДлина	= ДлинаПароля;
	СвойстваПароля.Сложный		= СложныйПароль;
	
	Если НомерРелизаПлатформы < 22 Тогда
		НовыйПароль = Пользователи.СоздатьПароль(СвойстваПароля);
		НовыйПароль = СтрЗаменить(НовыйПароль, " ", "_");
	Иначе
		ГенераторСлучайныхПаролей = Новый ГенераторСлучайныхПаролей; 
		НовыйПароль = ГенераторСлучайныхПаролей.СлучайныйПароль(ДлинаПароля);
	КонецЕсли;
	
	Возврат НовыйПароль;
	
КонецФункции // ПолучитьНовыйПароль()


&НаКлиенте
Функция УдалитьСимволы(Знач ИсходнаяСтрока)
	
	СписокЗапрещенныхСимволов = "~`!@#$%^&*()_+№;%:?[]{}\|'/,""";
	ИсходнаяСтрока = СтрСоединить(СтрРазделить(ИсходнаяСтрока, СписокЗапрещенныхСимволов)," ");
	Возврат СтрЗаменить(ИсходнаяСтрока, "  ", " ");

КонецФункции // УдалитьСимволы()


&НаКлиенте
Процедура ЗаполнитьТекстЯчеек(НомерСтроки, СтруктураЗначений)

	ТабличныйДокумент.Область(НомерСтроки, КолонкаИмени, 
							НомерСтроки, КолонкаИмени).Текст = СтруктураЗначений.КраткоеИмя;
	
	ТабличныйДокумент.Область(НомерСтроки, КолонкаПочты, 
							НомерСтроки, КолонкаПочты).Текст = СтруктураЗначений.ПочтаПользователя;
							
	ТабличныйДокумент.Область(НомерСтроки, КолонкаПользователяОС, 
							НомерСтроки, КолонкаПользователяОС).Текст = СтруктураЗначений.ПользовательОС;
							
	ОбластьПароля = ТабличныйДокумент.Область(НомерСтроки, КолонкаПароля,
											НомерСтроки, КолонкаПароля);
	Если Не ЗначениеЗаполнено(ОбластьПароля.Текст) Тогда
		ОбластьПароля.Текст = СтруктураЗначений.Пароль;
	КонецЕсли;
	
	ОбластьПравДоступа = ТабличныйДокумент.Область(НомерСтроки, КолонкаПравДоступа, 
												НомерСтроки, КолонкаПравДоступа);
	Если Не ЗначениеЗаполнено(ОбластьПравДоступа.Текст) Тогда
		ОбластьПравДоступа.Текст = СтруктураЗначений.ПраваДоступа;
	КонецЕсли; 
	
	ОбластьКомментарий = ТабличныйДокумент.Область(НомерСтроки, КолонкаКомментария, 
												НомерСтроки, КолонкаКомментария);
	
	Если Не ЗначениеЗаполнено(ОбластьКомментарий.Текст) Тогда
		ОбластьКомментарий.Текст = СтруктураЗначений.Комментарий;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТекстЯчеек()


// Раскладывает полное имя физического лица на составные части - фамилию, имя и отчество.
// Если в конце полного имени встречаются "оглы", "улы", "уулу", "кызы" или "гызы",
// то они также считаются частью отчества.
//
// Параметры:
//  ФамилияИмяОтчество - Строка - полное имя в виде "Фамилия Имя Отчество".
//
// Возвращаемое значение:
//  Структура:
//   * Фамилия  - Строка - фамилия;
//   * Имя      - Строка - имя;
//   * Отчество - Строка - отчество.
//
// Пример:
//   1. ФизическиеЛицаКлиентСервер.ЧастиИмени("Иванов Иван Иванович") 
//   вернет структуру со значениями свойств: "Иванов", "Иван", "Иванович".
//   2. ФизическиеЛицаКлиентСервер.ЧастиИмени("Смит Джон") 
//   вернет структуру со значениями свойств: "Смит", "Джон", "".
//   3. ФизическиеЛицаКлиентСервер.ЧастиИмени("Алиев Ахмед Октай оглы") 
//   вернет структуру со значениями свойств: "Алиев", "Ахмед", "Октай оглы".
// 
&НаКлиенте
Функция ЧастиИмени(ФамилияИмяОтчество) 
	
	Результат = Новый Структура;
	Результат.Вставить("Фамилия");
	Результат.Вставить("Имя");
	Результат.Вставить("Отчество");
	Результат.Вставить("КраткоеФИО");
	Результат.Вставить("ИмяПользователяИБ");
	
	ЧастиИмени = СтрРазделить(ФамилияИмяОтчество, " ", Ложь); 
	
	КоличествоДополнений = 0;
	
	Если ЧастиИмени.Количество() >= 1 Тогда
		Результат.Фамилия = ЧастиИмени[0];
	КонецЕсли;
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		ПервыеЧастиИмени = Новый Массив;
		ПервыеЧастиИмени.Добавить(НСтр("ru = 'Абдул'"));
		ПервыеЧастиИмени.Добавить(НСтр("ru = 'Абу'"));
		
		Результат.Имя = ЧастиИмени[1];
		Если ПервыеЧастиИмени.Найти(ТРег(ЧастиИмени[1])) <> Неопределено 
			И ЧастиИмени.Количество() >= 3 Тогда
			КоличествоДополнений = КоличествоДополнений + 1;
			Результат.Имя = Результат.Имя + " " + ЧастиИмени[2];
		КонецЕсли;
	КонецЕсли;
	
	Если ЧастиИмени.Количество() >= 3 + КоличествоДополнений Тогда
		Результат.Отчество = ЧастиИмени[2 + КоличествоДополнений];
	КонецЕсли;
	
	Если ЧастиИмени.Количество() > 3 + КоличествоДополнений Тогда
		ДополнительныеЧастиОтчества = Новый Массив;
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'оглы'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'улы'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'уулу'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'кызы'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'гызы'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'угли'"));
		
		Если ДополнительныеЧастиОтчества.Найти(НРег(ЧастиИмени[3 + КоличествоДополнений])) <> Неопределено Тогда
			Результат.Отчество = Результат.Отчество + " " + ЧастиИмени[3 + КоличествоДополнений];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


&НаКлиенте
Процедура ЗаписатьДанныеВJSON(ПутьКФайлу)
	
	ДанныеПользователей	= ПолучитьДанныеТабличногоДокумента();
	Настройки				= ПолучитьНастройки();
	
	Запись = Новый ЗаписьJSON;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	
	Запись.ОткрытьФайл(ПутьКФайлу, , , ПараметрыЗаписиJSON);
	
	ДанныеЭкспорта = Новый Структура;
	ДанныеЭкспорта.Вставить("Настройки",			Настройки);
	ДанныеЭкспорта.Вставить("ДанныеПользователей",	ДанныеПользователей);

	ЗаписатьJSON(Запись, ДанныеЭкспорта, Новый НастройкиСериализацииJSON);
	Запись.Закрыть();
	
КонецПроцедуры // ЗаписатьДанныеВJSON()

&НаКлиенте
Процедура ПрочитатьДанныеИзJSON(ПутьКФайлу)

	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ПутьКФайлу);

	ДанныеИмпорта = ПрочитатьJSON(Чтение);
	
	Чтение.Закрыть();
	
	УстановитьНастройки(ДанныеИмпорта.Настройки);
	УстановитьДанныеТабличногоДокумента(ДанныеИмпорта.ДанныеПользователей);

КонецПроцедуры // ПрочитатьДанныеИзJSON()


&НаКлиенте
Функция ПолучитьНастройки()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Автозаполнение");
	СтруктураНастроек.Вставить("АутентификацияСтандартная");
	СтруктураНастроек.Вставить("ПоказыватьВСпискеВыбора");
	СтруктураНастроек.Вставить("ПотребоватьСменуПароляПриВходе");
	СтруктураНастроек.Вставить("ЗапрещеноИзменятьПароль");
	СтруктураНастроек.Вставить("ЗапрещеноВосстанавливатьПароль");
	СтруктураНастроек.Вставить("АутентификацияОС");
	СтруктураНастроек.Вставить("АутентификацияOpenID");
	СтруктураНастроек.Вставить("АутентификацияOpenIDConnect");
	СтруктураНастроек.Вставить("АутентификацияТокеномДоступа");
	
	СтруктураНастроек.Вставить("ШаблонПочты");
	СтруктураНастроек.Вставить("ШаблонДомена");
	СтруктураНастроек.Вставить("ПарольХранимоеЗначение");
	СтруктураНастроек.Вставить("СпособУстановкиПароля");
	СтруктураНастроек.Вставить("ПарольПоУмолчанию");
	СтруктураНастроек.Вставить("ВариантУстановкиДоступа");
	СтруктураНастроек.Вставить("ДанныеПравДоступа");
	СтруктураНастроек.Вставить("Комментарий");
	СтруктураНастроек.Вставить("КоличествоПользователей");
	СтруктураНастроек.Вставить("Постфикс");
	
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, ЭтотОбъект);
	
	Возврат СтруктураНастроек;

КонецФункции // ПолучитьНастройки()


&НаКлиенте
Процедура УстановитьНастройки(Настройки)

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);

КонецПроцедуры // УстановитьНастройки()


&НаКлиенте
Процедура УстановитьДанныеТабличногоДокумента(ДанныеПользователей)
	
	ОчиститьПолеДокумента();
	НомерСтроки = 2;
	Для Каждого ОписаниеПользователя Из ДанныеПользователей Цикл 
		
		ТабличныйДокумент.Область(НомерСтроки, КолонкаПолногоИмени, 
								НомерСтроки, КолонкаПолногоИмени).Текст = ОписаниеПользователя.ПолноеИмя;
			
		ТабличныйДокумент.Область(НомерСтроки, КолонкаИмени, 
								НомерСтроки, КолонкаИмени).Текст = ОписаниеПользователя.Имя;
		
		ТабличныйДокумент.Область(НомерСтроки, КолонкаПочты, 
								НомерСтроки, КолонкаПочты).Текст = ОписаниеПользователя.АдресЭлектроннойПочты;
								
		ТабличныйДокумент.Область(НомерСтроки, КолонкаПользователяОС, 
								НомерСтроки, КолонкаПользователяОС).Текст = ОписаниеПользователя.ПользовательОС; 
								
		Если ВариантУстановкиДоступа = 0 Тогда
			ПравДоступа = ОписаниеПользователя.ПользовательОснование;
		Иначе
			ПравДоступа = ОписаниеПользователя.ГруппыДоступа;
		КонецЕсли;
		
		ТабличныйДокумент.Область(НомерСтроки, КолонкаПравДоступа, 
								НомерСтроки, КолонкаПравДоступа).Текст = ПравДоступа;
								
		Если ПарольХранимоеЗначение = 0 Тогда
			Пароль = ОписаниеПользователя.Пароль;
		Иначе
			Пароль = ОписаниеПользователя.СохраняемоеЗначениеПароля;
		КонецЕсли;
		
		ТабличныйДокумент.Область(НомерСтроки, КолонкаПароля, 
								НомерСтроки, КолонкаПароля).Текст = Пароль;
								
		ТабличныйДокумент.Область(НомерСтроки, КолонкаКомментария, 
								НомерСтроки, КолонкаКомментария).Текст = ОписаниеПользователя.Комментарий;
								
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
							
КонецПроцедуры // УстановитьДанныеТабличногоДокумента()

&НаКлиенте
Процедура ОчиститьПолеДокумента()
	
	ОчиститьПолеДокументаНаСервере();

КонецПроцедуры // ОчиститьПолеДокумента()

&НаСервере
Процедура ОчиститьПолеДокументаНаСервере()
	
	ОбластьШапки = ТабличныйДокумент.ПолучитьОбласть(1, 1, 1, 7);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбластьШапки);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеКолонки(НомерКолонки, Значение, Перезаполнять = Истина)

	Для НомерСтроки = 2 По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		ОбластьЯчейкиЗначения = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		Если Не ЗначениеЗаполнено(ОбластьЯчейкиЗначения.Текст) Или Перезаполнять Тогда
			ОбластьЯчейкиЗначения.Текст = Значение;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДанныеКолонки()

&НаКлиенте
Процедура ОповещенияВыбораПравДоступа(Источник, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Источник) = Тип("Массив") Тогда
		ДанныеПравДоступа = СтрСоединить(Источник, Символы.ПС);
	Иначе
		ДанныеПравДоступа = Строка(Источник);
	КонецЕсли;

КонецПроцедуры // ПриОткрытииПослеПодтвержденияОбновленияВидовДоступа()

#КонецОбласти





 


