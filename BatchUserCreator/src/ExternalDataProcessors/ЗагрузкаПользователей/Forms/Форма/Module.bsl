

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ТабличныйДокумент.ФиксацияСверху = 1;
	
	ВыполнитьПроверкуВерсииБСП();
	
	Элементы.ПотребоватьСменуПароляПриВходе.РасширеннаяПодсказка.Заголовок =
											ПользователиСлужебный.ПодсказкаПотребоватьСменуПароляПриВходе(Ложь);
	
	ЗаплолнитьНастройкиПоУмолчанию();
	
	ЭтаОбработки = РеквизитФормыВЗначение("Объект");
	ИспользуемоеИмяФайла = ЭтаОбработки.ИспользуемоеИмяФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ПустаяСтрока(ПараметрЗапуска) Тогда
		
		ОбработатьПакетныйЗапуск(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтображениеЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТабличныйДокументПриИзменении(Элемент)
	
	Если Не Автозаполнение Тогда
		Возврат;
	КонецЕсли;
	
	НомерПервойСтроки		= Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх;
	НомерПоследнейСтроки	= Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ;
	
	Если НомерПервойСтроки = 0 Или НомерПоследнейСтроки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НомерКолонки = Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево;
	
	Если НомерКолонки = Колонки.ПолноеИмя Тогда
		МассивУникальныхИмен = Новый Массив;
	
		Для НомерСтроки = НомерПервойСтроки По НомерПоследнейСтроки Цикл
			ПолноеИмяПользователя = ТабличныйДокумент.Область(НомерСтроки, Колонки.ПолноеИмя, 
																			НомерСтроки, Колонки.ПолноеИмя).Текст;
			МассивУникальныхИмен.Добавить(ПолноеИмяПользователя);
		КонецЦикла;
		
		ЗаполнитьПараметрыПользователей(МассивУникальныхИмен, НомерПервойСтроки);
	КонецЕсли;
	
	ПроверитьУникальностьЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольХранимоеЗначениеПриИзменении(Элемент)
	
	УстановитьЭлементыПароля();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантУстановкиДоступаПриИзменении(Элемент)
	
	УстановитьЭлементыДоступа();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПравДоступаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВариантУстановкиДоступа = 1 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора",		Истина);
		ПараметрыФормы.Вставить("МножественныйВыбор",	Истина);
		
		ПараметрыОтбора = Новый Структура("Пользователь", Неопределено);
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОповещенияВыбораПравДоступа", ЭтотОбъект);
		ОткрытьФорму("Справочник.ГруппыДоступа.Форма.ФормаСписка", ПараметрыФормы, Элемент, ЭтотОбъект, , , ОповещениеОЗакрытии);
	ИначеЕсли ВариантУстановкиДоступа = 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МножественныйВыбор",	Ложь);
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОповещенияВыбораПравДоступа", ЭтотОбъект);
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект, , , ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеПриИзменении(Элемент)
	
	УстановитьОтображениеЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрещеноИзменятьПарольПриИзменении(Элемент)
	
	Если ЗапрещеноИзменятьПароль Тогда
		ПотребоватьСменуПароляПриВходе = Ложь;
	КонецЕсли;
	
	УстановитьЭлементыВосставонвленияПароля();

КонецПроцедуры

&НаКлиенте
Процедура ПотребоватьСменуПароляПриВходеРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ПолноеИмяФормы = "ОбщаяФорма.НастройкиВходаПользователей";
	Если ФормаНастроекВходаДоступна(ПолноеИмяФормы) Тогда
		ОткрытьФорму(ПолноеИмяФормы, , ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПотребоватьСменуПароляПриВходеПриИзменении(Элемент)
	
	Если ПотребоватьСменуПароляПриВходе Тогда
		ЗапрещеноИзменятьПароль = Ложь;
	КонецЕсли;
	
	УстановитьЭлементыВосставонвленияПароля();

КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ИмпортироватьИзФайла(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "Файл JSON(*.json)|*.json";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	
	РезультатВыбора = Ждать ДиалогВыбораФайла.ВыбратьАсинх();
	
	Если РезультатВыбора.Количество() = 1 Тогда
	
		ДанныеИмпорта = ПрочитатьДанныеИзJSON(РезультатВыбора[0]);
		
		УстановитьНастройки(ДанныеИмпорта.Настройки);
		УстановитьДанныеТабличногоДокумента(ДанныеИмпорта.ДанныеПользователей);
		
		ПоказатьПредупреждение(, "Данные загружены");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Асинх Процедура ЭкспортироватьВФайл(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.ПолноеИмяФайла = ""; // Указать имя базы
	ДиалогВыбораФайла.Фильтр = "Файл JSON(*.json)|*.json";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	
	РезультатВыбора	= Ждать ДиалогВыбораФайла.ВыбратьАсинх();
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьДанныеВJSON(РезультатВыбора[0]);
	
	ПоказатьПредупреждение(, "Данные сохранены");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	ОчиститьПолеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСлучайныхПользователей(Команда)
	
	ПараметрыЗаполнения	= ПолучитьНастройки();
	ТабличныйДокумент	= ЗаполнитьСлучайныхПользователейНаСервере(ПараметрыЗаполнения);

	//ПроверитьУникальностьЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПользователя(Команда)
	
	ВыполнитьСозданиеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПользователей(Команда)
	
	ДанныеДляЗагрузки = ПолучитьДанныеТабличногоДокумента();
	ЗагрузитьПользователейНаСервере(ДанныеДляЗагрузки);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьНастройки(Команда)
	
	Элементы.ГруппаНастройки.Видимость = Не Элементы.ГруппаНастройки.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ПарольХранимоеЗначение = 1;
	ВариантУстановкиДоступа = 1;
	ТабличныйДокумент = ЗаполнитьПользователейТекущейБазыНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьВоВнешниеБазы(Команда)
	
	ИмяВременногоФайла	= КаталогВременныхФайлов() 
								+ Строка(УникальныйИдентификатор) + ".json";

	ЗаписатьДанныеВJSON(ИмяВременногоФайла);
	
	ПараметрыОткарытия	= Новый Структура;
	ПараметрыОткарытия.Вставить("ПутьКФайлуВыгрузки",	СтрЗаменить(ИмяВременногоФайла, """", """"""));
	ПараметрыОткарытия.Вставить("ПутьКОбработке",		СтрЗаменить(ИспользуемоеИмяФайла, """", """"""));
	
	//Получить путь к тукущей обработке
	ОткрытьФорму("ВнешняяОбработка.ЗагрузкаПользователей.Форма.ФормаСпискаИБ", ПараметрыОткарытия);

КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьПроверкуВерсииБСП()
	
	МассивМинимальноВерсии = Новый Массив;
	МассивМинимальноВерсии.Добавить(3);
	МассивМинимальноВерсии.Добавить(1);
	МассивМинимальноВерсии.Добавить(3);
	
	Если Метаданные.ОбщиеМодули.Найти("СтандартныеПодсистемыСервер") = Неопределено Тогда
		ВызватьИсключение "Отсутсвует БСП";
	Иначе
		Результат = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
		МассивВерсии = СтрРазделить(Результат, ".");
		Если Не (Число(МассивВерсии[0]) >= МассивМинимальноВерсии[0] 
			И Число(МассивВерсии[1]) >= МассивМинимальноВерсии[1] 
			И Число(МассивВерсии[2]) >= МассивМинимальноВерсии[2]) Тогда
			
			ВызватьИсключение "Текущая версия БСП не поддерживается";	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПакетныйЗапуск(Отказ)
	
	Если СтрНайти(ПараметрЗапуска, "Загрузить", , 1) Тогда
		
		Отказ = Истина;
		
		ПутьКФайлу = СокрЛП(СтрЗаменить(ПараметрЗапуска, "Загрузить", ""));
		
		ДанныеИмпорта = ПрочитатьДанныеИзJSON(ПутьКФайлу);
		ЗагрузитьПользователейНаСервере(ДанныеИмпорта.ДанныеПользователей);

		ЗавершитьРаботуСистемы(Ложь);
		
	ИначеЕсли СтрНайти(ПараметрЗапуска, "Генерировать", , 1) Тогда
		
		Отказ = Истина;
		
		ПутьКФайлу = СокрЛП(СтрЗаменить(ПараметрЗапуска, "Генерировать", ""));
		
		ДанныеИмпорта = ПрочитатьДанныеИзJSON(ПутьКФайлу);
		СоздатьСлучайныхПользователей(ДанныеИмпорта.Настройки);
		ТабличныйДокумент	= ЗаполнитьСлучайныхПользователейНаСервере(ДанныеИмпорта.Настройки);
		
		ЗавершитьРаботуСистемы(Ложь);
		
	ИначеЕсли СтрНайти(ПараметрЗапуска, "Генерировать", , 1) Тогда
		
		Отказ = Истина;
		
		ПутьКФайлу = СокрЛП(СтрЗаменить(ПараметрЗапуска, "Генерировать", ""));
		
		ВариантУстановкиДоступа	= 1;
		ПарольХранимоеЗначение	= 1;
		
		ЗаписатьДанныеВJSON(ПутьКФайлу);
		
		ЗавершитьРаботуСистемы(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры 


&НаКлиенте
Процедура СоздатьСлучайныхПользователей(НастройкиЗаполнения)
	
	НаборНовыхПользователей = ПолучитьНаборНовыхПользователей(НастройкиЗаполнения);
	ЗагрузитьПользователейНаСервере(НаборНовыхПользователей);

КонецПроцедуры 

&НаКлиенте
Процедура УстановитьЭлементыПароля()
	
	Если ПарольХранимоеЗначение = 1 Тогда
		ТабличныйДокумент.Область("Пароль").Текст = "Хранимое значение";
		СпособУстановкиПароля = 1;
	Иначе
		ТабличныйДокумент.Область("Пароль").Текст = "Пароль";
	КонецЕсли;
	
	Элементы.СпособУстановкиПароляГенерировать.Доступность = (ПарольХранимоеЗначение = 0);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЭлементыВосставонвленияПароля()
	
	Если ЗапрещеноИзменятьПароль Тогда
		ЗапрещеноВосстанавливатьПароль = Истина;
	КонецЕсли;
	
	Элементы.ЗапрещеноВосстанавливатьПароль.Доступность = Не ЗапрещеноИзменятьПароль;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЭлементыДоступа()

	Если ВариантУстановкиДоступа = 1 Тогда
		ДанныеПравДоступа = "";
		ТабличныйДокумент.Область("ПраваДоступа").Текст = "Группы доступа";
	Иначе
		ДанныеПравДоступа = ПолучитьИмяТекущегоПользователя();
		ТабличныйДокумент.Область("ПраваДоступа").Текст = "Пользователь основание";
	КонецЕсли;
	
	ЗаполнитьДанныеКолонки(Колонки.ПраваДоступа, ДанныеПравДоступа, Ложь);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ФормаНастроекВходаДоступна(ПолноеИмяФормы)
	
	ФормаНастроекВхода = ОбщегоНазначения.ОбъектМетаданныхПоПолномуИмени(ПолноеИмяФормы);
	Возврат ФормаНастроекВхода <> Неопределено;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПользователейТекущейБазыНаСервере()
	
	СоставДанныхПользователей = ПолучитьДанныеПользователейТекущейБазы();
	УстановитьДанныеТабличногоДокумента(СоставДанныхПользователей, 2);
	
	Возврат ТабличныйДокумент;

КонецФункции

&НаСервере
Функция ПолучитьДанныеПользователейТекущейБазы()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПолучитьДанныеПользователейТекущейБазы();

КонецФункции



&НаСервере
Процедура ЗаплолнитьНастройкиПоУмолчанию()

	Автозаполнение = Истина;
	
	АутентификацияСтандартная		= Истина;
	ПотребоватьСменуПароляПриВходе	= Ложь;
	ПоказыватьВСпискеВыбора		= Истина;
	ЗапрещеноИзменятьПароль		= Ложь;
	
	АутентификацияОС				= Истина;
	АутентификацияOpenID			= Ложь;
	АутентификацияOpenIDConnect	= Ложь;
	
	ШаблонПочты	= "%i%o%F@mail.me";
	ШаблонДомена	= "\\localhost\%i%o%F";
	
	
	ПарольХранимоеЗначение	= 0;
	ВариантУстановкиДоступа	= 0;
	
	ДанныеПравДоступа = ПолучитьИмяТекущегоПользователя();
		
	КоличествоПользователей = 100; 
	
	Колонки = Новый Структура;
	Колонки.Вставить("ПолноеИмя",						1);
	Колонки.Вставить("Имя",							2);
	Колонки.Вставить("АдресЭлектроннойПочты",			3);
	Колонки.Вставить("ПользовательОС",					4);
	Колонки.Вставить("Пароль",							5);
	Колонки.Вставить("ПраваДоступа",					6);
	Колонки.Вставить("Комментарий",						7);
	Колонки.Вставить("ПоказыватьВСпискеВыбора",			8);
	Колонки.Вставить("ПотребоватьСменуПароляПриВходе",	9);
	Колонки.Вставить("ЗапрещеноИзменятьПароль",			10);
	Колонки.Вставить("ЗапрещеноВосстанавливатьПароль",	11);
	Колонки.Вставить("АутентификацияСтандартная",		12);
	Колонки.Вставить("АутентификацияОС",				13);
	Колонки.Вставить("АутентификацияOpenID",			14);
	Колонки.Вставить("АутентификацияOpenIDConnect",		15);
	Колонки.Вставить("АутентификацияТокеномДоступа",		16);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяТекущегоПользователя()

	#Если Клиент Тогда
	
	ТекущийПользователь	= ПользователиКлиент.ТекущийПользователь();
	ИмяПользователя		= Строка(ТекущийПользователь);
	
	#ИначеЕсли Сервер Тогда

	ТекущийПользователь	= Пользователи.ТекущийПользователь();
	ИмяПользователя		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Наименование");

	#КонецЕсли 

	Возврат ИмяПользователя;
	
КонецФункции // ПолучитьИмяТекущегоПользователя()

&НаКлиенте
Процедура УстановитьОтображениеЭлементов()
	
	Элементы.ГруппаАутентификация.Доступность	= Автозаполнение;
	Элементы.ГруппаЗаполнение.Доступность		= Автозаполнение;
	Элементы.ГруппаГенерация.Доступность		= Автозаполнение;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСлучайныхПользователейНаСервере(НастройкиЗаполнения)
	
	НаборНовыхПользователей = ПолучитьНаборНовыхПользователей(НастройкиЗаполнения);
	
	НачальнаяСтрокаТаблицы = ТабличныйДокумент.ВысотаТаблицы + 1;
	УстановитьДанныеТабличногоДокумента(НаборНовыхПользователей, НачальнаяСтрокаТаблицы);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция ПолучитьНаборНовыхПользователей(НастройкиЗаполнения)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	НаборНовыхПользователей = ОбъектОбработка.ПолучитьНаборСлучайныхПользователей(НастройкиЗаполнения);
	
	Если ДоступПоСлучайномуПользователю Тогда
		УстановитьСлучайныхПользователейОснованийНаСервере(НаборНовыхПользователей);
	КонецЕсли;
	
	Возврат НаборНовыхПользователей;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьСлучайныхПользователейОснованийНаСервере(НаборНовыхПользователей)

	МассивПользователей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Наименование КАК Пользователь,
	               |	Пользователи.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	НЕ Пользователи.ПометкаУдаления
	               |	И НЕ Пользователи.Недействителен
	               |	И Пользователи.Наименование <> """"
	               |	И НЕ Пользователи.Предопределенный
	               |	И Пользователи.Наименование <> ""<Не указан>""
	               |	И НЕ Пользователи.Служебный";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Результат.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю("Пользователи не найдены");
		ВызватьИсключение "Пользователи не найдены";
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Пользователи.ЭтоПолноправныйПользователь(Выборка.Ссылка, Истина)
			И Пользователи.ВходВПрограммуРазрешен(Выборка.Ссылка) Тогда
			МассивПользователей.Добавить(Выборка.Пользователь);
		КонецЕсли;
	
	КонецЦикла;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	Для Каждого ЭлементНабора Из НаборНовыхПользователей Цикл
		СлучайноеЧисло = ГСЧ.СлучайноеЧисло(0, МассивПользователей.ВГраница());
		СлучайныйПользователь = МассивПользователей[СлучайноеЧисло];
		
		ЭлементНабора.ПользовательОснование = СлучайныйПользователь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСозданиеНаСервере()

	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	СтруктураПараметров = ОбъектОбработка.ПолучитьСтруктуруПараметровПользователя();
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	ОбъектОбработка.СоздатьПолизователяПоПараметрам(СтруктураПараметров);

КонецПроцедуры // ВыполнитьСозданиеНаСервере()

&НаКлиенте
Функция ПолучитьДанныеТабличногоДокумента()

	СоставПользователей = Новый Массив;
	СписокПолейЗаполнеия = ПоляЗаполнения();
	
	КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы;
	Для СчетчикСтрок = 2 По КоличествоСтрок Цикл
		
		ОписаниеПользователя = ПолучитьОписаниеПользователя();
		
		ЗаполнитьЗначенияПоДаннымСтроки(ОписаниеПользователя, СчетчикСтрок, СписокПолейЗаполнеия);
		
		Пароль		= ТабличныйДокумент.Область(СчетчикСтрок, Колонки.Пароль, СчетчикСтрок, Колонки.Пароль).Текст;
		ПраваДоступа	= ТабличныйДокумент.Область(СчетчикСтрок, Колонки.ПраваДоступа, СчетчикСтрок, Колонки.ПраваДоступа).Текст;
		
		Если ПарольХранимоеЗначение = 0 Тогда
			ОписаниеПользователя.Пароль = Пароль;
			ОписаниеПользователя.ПарольУстановлен = Ложь;
			ОписаниеПользователя.СохраняемоеЗначениеПароля = "";
		Иначе
			ОписаниеПользователя.Пароль = "";
			ОписаниеПользователя.ПарольУстановлен = Истина;
			ОписаниеПользователя.СохраняемоеЗначениеПароля = Пароль;
		КонецЕсли;
		
		ОписаниеПользователя.ГруппыДоступа = "";
		ОписаниеПользователя.ПользовательОснование = "";
		
		Если ВариантУстановкиДоступа = 0 Тогда
			ОписаниеПользователя.ПользовательОснование = ПраваДоступа;
		ИначеЕсли ВариантУстановкиДоступа = 1 Тогда
			ОписаниеПользователя.ГруппыДоступа = ПраваДоступа;
		КонецЕсли;
		
		СоставПользователей.Добавить(ОписаниеПользователя);
		
	КонецЦикла;
	
	Возврат СоставПользователей;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗначенияПоДаннымСтроки(ОписаниеПользователя, НомерСтроки, ПоляЗаполнения)

	Для Каждого ИмяПоля Из ПоляЗаполнения Цикл
		
		ОбластьЗначения = ТабличныйДокумент.Область(НомерСтроки, Колонки[ИмяПоля], 
												НомерСтроки, Колонки[ИмяПоля]);
		Если ТипЗнч(ОписаниеПользователя[ИмяПоля]) = Тип("Булево") Тогда
			ОписаниеПользователя[ИмяПоля] = Не ПустаяСтрока(ОбластьЗначения.Текст);
		Иначе
			ОписаниеПользователя[ИмяПоля] = ОбластьЗначения.Текст;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗначенияПоДаннымСтроки()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеПользователя()
	
	ОписаниеПользователя = Новый Структура;
	ОписаниеПользователя.Вставить("Имя", "");
	ОписаниеПользователя.Вставить("ПолноеИмя", "");
	ОписаниеПользователя.Вставить("АдресЭлектроннойПочты", "");
	
	ОписаниеПользователя.Вставить("Пароль", "");
	ОписаниеПользователя.Вставить("СохраняемоеЗначениеПароля", "");
	
	ОписаниеПользователя.Вставить("ПоказыватьВСпискеВыбора", Ложь);
	ОписаниеПользователя.Вставить("ЗапрещеноИзменятьПароль", Ложь);
	ОписаниеПользователя.Вставить("ЗапрещеноВосстанавливатьПароль", Ложь);
	
	//Если свойство ПарольУстановлен = Ложь, тогда в незаполненное свойство СохраняемоеЗначениеПароля устанавливается новое сгенерированное значение пароля
	ОписаниеПользователя.Вставить("ПарольУстановлен", Ложь); 
	
	ОписаниеПользователя.Вставить("ПользовательОС", "");
	
	ОписаниеПользователя.Вставить("ПотребоватьСменуПароляПриВходе", Ложь);
	ОписаниеПользователя.Вставить("АутентификацияСтандартная", Ложь);
	ОписаниеПользователя.Вставить("АутентификацияOpenID", Ложь);
	ОписаниеПользователя.Вставить("АутентификацияOpenIDConnect", Ложь);
	ОписаниеПользователя.Вставить("АутентификацияТокеномДоступа", Ложь);
	ОписаниеПользователя.Вставить("АутентификацияОС", Ложь);
	
	ОписаниеПользователя.Вставить("ГруппыДоступа", "");
	ОписаниеПользователя.Вставить("ПользовательОснование", "");
	ОписаниеПользователя.Вставить("Комментарий", "");
	
	ОписаниеПользователя.Вставить("РежимЗапуска", "Авто");
	ОписаниеПользователя.Вставить("ЗащитаОтОпасныхДействий", Истина);
	
	Возврат ОписаниеПользователя;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПользователейНаСервере(ДанныеДляЗагрузки)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	ОбъектОбработка.ВыполнитьЗагрузкуПользователей(ДанныеДляЗагрузки);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУникальностьЗначений()
	
	ПолныеИмена			= Новый Массив;
	КраткиеИмена			= Новый Массив;
	ПользователиОС		= Новый Массив;
	АдресЭлектроннойПочты	= Новый Массив;
	
	Для НомерСтроки = 2 По ТабличныйДокумент.ВысотаТаблицы Цикл
		ПроверитьЗначениеСтроки(ПолныеИмена,				НомерСтроки, 1);
		ПроверитьЗначениеСтроки(КраткиеИмена,				НомерСтроки, 2);
		ПроверитьЗначениеСтроки(ПользователиОС,			НомерСтроки, 3);
		ПроверитьЗначениеСтроки(АдресЭлектроннойПочты,	НомерСтроки, 4);
	КонецЦикла;
	
КонецПроцедуры // ПроверитьУникальностьЗначений()

&НаКлиенте
Процедура ПроверитьЗначениеСтроки(МассивЗначений, НомерСтроки, НомерКолонки)

	//Значения в колонках 1 и 2 обязательные для заполнения.
	
	ОбластьЗначений = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
	
	Если ПустаяСтрока(ОбластьЗначений.Текст) Тогда
		Если НомерКолонки = 1 Или НомерКолонки = 2 Тогда
			ОбластьЗначений.ЦветФона	= WebЦвета.Льняной;
			ОбластьЗначений.ЦветТекста	= WebЦвета.ТемноКрасный;
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон("В строке %1 в колонке %2 не указано значение!", 
																НомерСтроки, НомерКолонки));	
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивЗначений.Найти(ОбластьЗначений.Текст) = Неопределено Тогда
		МассивЗначений.Добавить(ОбластьЗначений.Текст);
		ОбластьЗначений.ЦветФона	= Новый Цвет;
		ОбластьЗначений.ЦветТекста	= Новый Цвет;
	Иначе
		ОбластьЗначений.ЦветФона	= WebЦвета.Льняной;
		ОбластьЗначений.ЦветТекста	= WebЦвета.ТемноКрасный;
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон("В строке %1 в колонке %2 указано неуникальное значение!", 
															НомерСтроки, НомерКолонки));
	КонецЕсли;

КонецПроцедуры // ПроверитьЗначениеСтроки()

&НаКлиенте
Процедура ЗаполнитьПараметрыПользователей(НаборИменПользователей, НомерНачальнойСтроки);
	
	НастройкиЗаполнения	= ПолучитьНастройки();
	ТабличныйДокумент	= ПолучитьОписанияПользователейНаСервере(НаборИменПользователей, НастройкиЗаполнения, НомерНачальнойСтроки);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОписанияПользователейНаСервере(НаборИменПользователей, ПараметрыЗаполнения, НомерНачальнойСтроки)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	НаборДанныхПользователей = ОбъектОбработка.ЗаполнитьНаборПользователей(НаборИменПользователей, ПараметрыЗаполнения);
	
	УстановитьДанныеТабличногоДокумента(НаборДанныхПользователей, НомерНачальнойСтроки);

	Возврат ТабличныйДокумент;

КонецФункции 

&НаКлиенте
Процедура ПривестиКУникальнымИмена(СтруктураИмени, МассивУникальныхИмен, СчетчикДублей = 0)
	
	ДопСимволИмени	= Макс(1, Окр(СчетчикДублей / 2));
	ДопСимволОтчества	= Макс(1, СчетчикДублей - ДопСимволИмени);
	
	ДопСимволИмени	= Мин(ДопСимволИмени,		СтрДлина(СтруктураИмени.Имя));
	ДопСимволОтчества	= Мин(ДопСимволОтчества,	СтрДлина(СтруктураИмени.Отчество));
	
	ИнициалыФамилия	= Лев(СтруктураИмени.Фамилия, 1);
	ИнициалыИмя		= Лев(СтруктураИмени.Имя, ДопСимволИмени);
	ИнициалыОтчество	= Лев(СтруктураИмени.Отчество, ДопСимволОтчества);
	
	КраткоеФИО			= ИнициалыИмя + ИнициалыОтчество + СтруктураИмени.Фамилия;
	ИмяПользователяИБ	= СтруктураИмени.Фамилия + ИнициалыИмя + ИнициалыОтчество;
	
	ДубльЗначения = МассивУникальныхИмен.Найти(КраткоеФИО);
	Если ДубльЗначения = Неопределено Тогда
		МассивУникальныхИмен.Добавить(КраткоеФИО);
		СтруктураИмени.ИмяПользователяИБ	= ИмяПользователяИБ;
		СтруктураИмени.КраткоеФИО			= КраткоеФИО;
		СтруктураИмени.ИнициалыИмя		= ИнициалыИмя;
		СтруктураИмени.ИнициалыФамилия	= ИнициалыФамилия;
		СтруктураИмени.ИнициалыОтчество	= ИнициалыОтчество;
	Иначе
		СчетчикДублей = СчетчикДублей + 1;
		ПривестиКУникальнымИмена(СтруктураИмени, МассивУникальныхИмен, СчетчикДублей);
	КонецЕсли;

КонецПроцедуры // ПолучитьУникальноеИмя()

&НаКлиенте
Процедура ЗаписатьДанныеВJSON(ПутьКФайлу)
	
	ДанныеПользователей = ПолучитьДанныеТабличногоДокумента();
	НастройкиЗаполнения = ПолучитьНастройки();
	
	Запись = Новый ЗаписьJSON;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	
	Запись.ОткрытьФайл(ПутьКФайлу, , , ПараметрыЗаписиJSON);
	
	ДанныеЭкспорта = Новый Структура;
	ДанныеЭкспорта.Вставить("Настройки",			НастройкиЗаполнения);
	ДанныеЭкспорта.Вставить("ДанныеПользователей",	ДанныеПользователей);

	ЗаписатьJSON(Запись, ДанныеЭкспорта, Новый НастройкиСериализацииJSON);
	Запись.Закрыть();
	
КонецПроцедуры // ЗаписатьДанныеВJSON()

&НаКлиенте
Функция ПрочитатьДанныеИзJSON(ПутьКФайлу)

	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ПутьКФайлу);

	ДанныеИмпорта = ПрочитатьJSON(Чтение);
	
	Чтение.Закрыть();
	
	Возврат ДанныеИмпорта;

КонецФункции // ПрочитатьДанныеИзJSON()

&НаКлиенте
Функция ПолучитьНастройки()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Автозаполнение");
	СтруктураНастроек.Вставить("АутентификацияСтандартная");
	СтруктураНастроек.Вставить("ПоказыватьВСпискеВыбора");
	СтруктураНастроек.Вставить("ПотребоватьСменуПароляПриВходе");
	СтруктураНастроек.Вставить("ЗапрещеноИзменятьПароль");
	СтруктураНастроек.Вставить("ЗапрещеноВосстанавливатьПароль");
	СтруктураНастроек.Вставить("АутентификацияОС");
	СтруктураНастроек.Вставить("АутентификацияOpenID");
	СтруктураНастроек.Вставить("АутентификацияOpenIDConnect");
	СтруктураНастроек.Вставить("АутентификацияТокеномДоступа");
	
	СтруктураНастроек.Вставить("ШаблонПочты");
	СтруктураНастроек.Вставить("ШаблонДомена");
	СтруктураНастроек.Вставить("ПарольХранимоеЗначение");
	СтруктураНастроек.Вставить("СпособУстановкиПароля");
	СтруктураНастроек.Вставить("ПарольПоУмолчанию");
	СтруктураНастроек.Вставить("ВариантУстановкиДоступа");
	СтруктураНастроек.Вставить("ДанныеПравДоступа");
	СтруктураНастроек.Вставить("Комментарий");
	СтруктураНастроек.Вставить("КоличествоПользователей");
	СтруктураНастроек.Вставить("ДоступПоСлучайномуПользователю");
	СтруктураНастроек.Вставить("Постфикс");
	
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, ЭтотОбъект);
	
	Возврат СтруктураНастроек;

КонецФункции // ПолучитьНастройки()

&НаКлиенте
Процедура УстановитьНастройки(Настройки)

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);
	
	УстановитьЭлементыПароля();
	УстановитьЭлементыДоступа();
	УстановитьЭлементыВосставонвленияПароля();

КонецПроцедуры // УстановитьНастройки()

&НаСервере
Процедура УстановитьДанныеТабличногоДокумента(ДанныеПользователей, НачальныйНомерСтроки = Неопределено)
	
	СписокПолейЗаполнеия = ПоляЗаполнения();
	
	Если НачальныйНомерСтроки = Неопределено Тогда
		ОчиститьПолеДокументаНаСервере();
		НачальныйНомерСтроки = 2;
	КонецЕсли;
	
	НомерСтроки = НачальныйНомерСтроки;
	Для Каждого ОписаниеПользователя Из ДанныеПользователей Цикл  
		
		ЗаполнитьДанныеСтрокиЗначениями(ОписаниеПользователя, НомерСтроки, СписокПолейЗаполнеия);
		
		Если ВариантУстановкиДоступа = 0 Тогда
			ПравДоступа = ОписаниеПользователя.ПользовательОснование;
		Иначе
			ПравДоступа = ОписаниеПользователя.ГруппыДоступа;
		КонецЕсли;
		
		ОбластьДоступа = ТабличныйДокумент.Область(НомерСтроки, Колонки.ПраваДоступа, 
																НомерСтроки, Колонки.ПраваДоступа);
		Если ПустаяСтрока(ОбластьДоступа.Текст) Тогда
			ОбластьДоступа.Текст = ПравДоступа;
		КонецЕсли;


		Если ПарольХранимоеЗначение = 0 Тогда
			Пароль = ОписаниеПользователя.Пароль;
		Иначе
			Пароль = ОписаниеПользователя.СохраняемоеЗначениеПароля;
		КонецЕсли;
		
		ОбластьПароля = ТабличныйДокумент.Область(НомерСтроки, Колонки.Пароль, 
															НомерСтроки, Колонки.Пароль);
		Если ПустаяСтрока(ОбластьПароля.Текст) Тогда
			ОбластьПароля.Текст = Пароль;
		КонецЕсли;
								
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
							
КонецПроцедуры // УстановитьДанныеТабличногоДокумента()

&НаСервере
Процедура ЗаполнитьДанныеСтрокиЗначениями(ОписаниеПользователя, НомерСтроки, ПоляЗаполнения)

	Для Каждого ИмяПоля Из ПоляЗаполнения Цикл
		
		ОбластьЗначения = ТабличныйДокумент.Область(НомерСтроки, Колонки[ИмяПоля], 
												НомерСтроки, Колонки[ИмяПоля]);
		
		Если ТипЗнч(ОписаниеПользователя[ИмяПоля]) = Тип("Булево") Тогда
			ОбластьЗначения.Текст = Формат(ОписаниеПользователя[ИмяПоля], "БЛ=; БИ=+");
		Иначе
			ОбластьЗначения.Текст = ОписаниеПользователя[ИмяПоля];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗначенияПоДаннымСтроки()

&НаКлиенте
Процедура ОчиститьПолеДокумента()
	
	ОчиститьПолеДокументаНаСервере();

КонецПроцедуры // ОчиститьПолеДокумента()

&НаСервере
Процедура ОчиститьПолеДокументаНаСервере()
	
	ОбластьШапки = ТабличныйДокумент.ПолучитьОбласть(1, 1, 1, Колонки.Количество());
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбластьШапки);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоляЗаполнения()

	ПоляЗаполнения = Новый Массив;
	ПоляЗаполнения.Добавить("Имя");
	ПоляЗаполнения.Добавить("ПолноеИмя");
	ПоляЗаполнения.Добавить("АдресЭлектроннойПочты");
	ПоляЗаполнения.Добавить("ПользовательОС");
	ПоляЗаполнения.Добавить("Комментарий");
	ПоляЗаполнения.Добавить("ПоказыватьВСпискеВыбора");
	ПоляЗаполнения.Добавить("ПотребоватьСменуПароляПриВходе");
	ПоляЗаполнения.Добавить("ЗапрещеноИзменятьПароль");
	ПоляЗаполнения.Добавить("ЗапрещеноВосстанавливатьПароль");
	ПоляЗаполнения.Добавить("АутентификацияСтандартная");
	ПоляЗаполнения.Добавить("АутентификацияОС");
	ПоляЗаполнения.Добавить("АутентификацияOpenID");
	ПоляЗаполнения.Добавить("АутентификацияOpenIDConnect");
	ПоляЗаполнения.Добавить("АутентификацияТокеномДоступа");
	
	Возврат ПоляЗаполнения;

КонецФункции // ПоляЗаполнения()

&НаКлиенте
Процедура ЗаполнитьДанныеКолонки(НомерКолонки, Значение, Перезаполнять = Истина)

	Для НомерСтроки = 2 По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		ОбластьЯчейкиЗначения = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		Если Не ЗначениеЗаполнено(ОбластьЯчейкиЗначения.Текст) Или Перезаполнять Тогда
			ОбластьЯчейкиЗначения.Текст = Значение;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДанныеКолонки()

&НаКлиенте
Процедура ОповещенияВыбораПравДоступа(Источник, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Источник) = Тип("Массив") Тогда
		ДанныеПравДоступа = СтрСоединить(Источник, Символы.ПС);
	Иначе
		ДанныеПравДоступа = Строка(Источник);
	КонецЕсли;

КонецПроцедуры // ПриОткрытииПослеПодтвержденияОбновленияВидовДоступа()

#КонецОбласти
